'use client';

import { useState } from 'react';
import { ResumeDetail } from '@/lib/types/resume';

interface Experience {
  company: string;
  position: string;
  start_date: string;
  end_date: string;
  description: string;
  achievements: string[];
  is_current?: boolean;
}

interface ExperienceSectionProps {
  data: ResumeDetail;
  onChange: (field: keyof ResumeDetail, value: any) => void;
}

export default function ExperienceSection({ data, onChange }: ExperienceSectionProps) {
  const [editingIndex, setEditingIndex] = useState<number>(-1);
  const [newExperience, setNewExperience] = useState<Experience>({
    company: '',
    position: '',
    start_date: '',
    end_date: '',
    description: '',
    achievements: [],
    is_current: false
  });
  const [newAchievement, setNewAchievement] = useState('');

  const experience: Experience[] = (data.experience as Experience[]) || [];

  // Ëé∑ÂèñÂÖ¨Âè∏Á±ªÂûãÂõæÊ†á
  const getCompanyIcon = (company: string) => {
    if (company.toLowerCase().includes('google')) return 'üîç';
    if (company.toLowerCase().includes('microsoft')) return 'üñ•Ô∏è';
    if (company.toLowerCase().includes('apple')) return 'üçé';
    if (company.toLowerCase().includes('amazon')) return 'üì¶';
    if (company.toLowerCase().includes('facebook') || company.toLowerCase().includes('meta')) return 'üìò';
    return 'üè¢';
  };

  // Ê∑ªÂä†Êñ∞Â∑•‰ΩúÁªèÂéÜ
  const addExperience = () => {
    if (!newExperience.company.trim() || !newExperience.position.trim()) {
      alert('Please fill in company name and position.');
      return;
    }

    const expToAdd = { ...newExperience };
    if (expToAdd.is_current) {
      expToAdd.end_date = '';
    }

    const updatedExperience = [...experience, expToAdd];
    onChange('experience', updatedExperience);
    
    // ÈáçÁΩÆË°®Âçï
    setNewExperience({
      company: '',
      position: '',
      start_date: '',
      end_date: '',
      description: '',
      achievements: [],
      is_current: false
    });
    setNewAchievement('');
  };

  // Êõ¥Êñ∞Â∑•‰ΩúÁªèÂéÜ
  const updateExperience = (index: number, field: keyof Experience, value: any) => {
    const updatedExperience = [...experience];
    updatedExperience[index] = { ...updatedExperience[index], [field]: value };
    
    // Â¶ÇÊûúËÆæÁΩÆ‰∏∫ÂΩìÂâçÂ∑•‰ΩúÔºåÊ∏ÖÁ©∫ÁªìÊùüÊó•Êúü
    if (field === 'is_current' && value) {
      updatedExperience[index].end_date = '';
    }
    
    onChange('experience', updatedExperience);
  };

  // Âà†Èô§Â∑•‰ΩúÁªèÂéÜ
  const removeExperience = (index: number) => {
    if (confirm('Are you sure you want to delete this work experience?')) {
      const updatedExperience = [...experience];
      updatedExperience.splice(index, 1);
      onChange('experience', updatedExperience);
      setEditingIndex(-1);
    }
  };

  // Ê∑ªÂä†ÊàêÂ∞±Âà∞Êñ∞ÁªèÂéÜ
  const addAchievementToNew = () => {
    if (!newAchievement.trim()) return;
    
    setNewExperience({
      ...newExperience,
      achievements: [...newExperience.achievements, newAchievement.trim()]
    });
    setNewAchievement('');
  };

  // Âà†Èô§Êñ∞ÁªèÂéÜÁöÑÊàêÂ∞±
  const removeAchievementFromNew = (achIndex: number) => {
    const achievements = [...newExperience.achievements];
    achievements.splice(achIndex, 1);
    setNewExperience({ ...newExperience, achievements });
  };

  // Ê∑ªÂä†ÊàêÂ∞±Âà∞Áé∞ÊúâÁªèÂéÜ
  const addAchievementToExisting = (expIndex: number, achievement: string) => {
    if (!achievement.trim()) return;
    
    const updatedExperience = [...experience];
    const achievements = updatedExperience[expIndex].achievements || [];
    achievements.push(achievement.trim());
    updatedExperience[expIndex].achievements = achievements;
    onChange('experience', updatedExperience);
  };

  // Âà†Èô§Áé∞ÊúâÁªèÂéÜÁöÑÊàêÂ∞±
  const removeAchievementFromExisting = (expIndex: number, achIndex: number) => {
    const updatedExperience = [...experience];
    const achievements = updatedExperience[expIndex].achievements || [];
    achievements.splice(achIndex, 1);
    updatedExperience[expIndex].achievements = achievements;
    onChange('experience', updatedExperience);
  };

  // Ê†ºÂºèÂåñÊó•Êúü
  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const date = new Date(dateStr + '-01');
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-emerald-50">
      <div className="max-w-6xl mx-auto p-8 space-y-8">
        {/* Áé∞‰ª£ÂåñÊ†áÈ¢òÂå∫Âüü */}
        <div className="relative">
          <div className="absolute inset-0 bg-gradient-to-r from-emerald-500/10 to-teal-500/10 rounded-3xl blur-3xl"></div>
          <div className="relative bg-white/80 backdrop-blur-sm border border-white/50 rounded-3xl p-8 shadow-xl">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V8a2 2 0 012-2V6" />
                </svg>
              </div>
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-900 via-slate-700 to-emerald-600 bg-clip-text text-transparent">
                  Professional Journey
                </h1>
                <p className="text-slate-600 text-lg mt-2">
                  Document your career milestones and professional achievements
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-6 text-sm text-slate-500">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <span>Career Timeline</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <span>Achievement Tracking</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                <span>Impact Metrics</span>
              </div>
            </div>
          </div>
        </div>

        {/* Ê∑ªÂä†Â∑•‰ΩúÁªèÂéÜË°®Âçï */}
        <div className="bg-white/70 backdrop-blur-sm border border-emerald-100 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-8">
            <div className="w-10 h-10 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Add Work Experience</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* ÂÖ¨Âè∏ÂêçÁß∞ */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                Company
                <span className="text-red-500 ml-1">*</span>
              </label>
              <input
                type="text"
                value={newExperience.company}
                onChange={(e) => setNewExperience({...newExperience, company: e.target.value})}
                className="w-full bg-gradient-to-r from-emerald-50 to-teal-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                placeholder="e.g., Google, Microsoft, ABC Corp"
              />
            </div>

            {/* ËÅå‰Ωç */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Position
                <span className="text-red-500 ml-1">*</span>
              </label>
              <input
                type="text"
                value={newExperience.position}
                onChange={(e) => setNewExperience({...newExperience, position: e.target.value})}
                className="w-full bg-gradient-to-r from-blue-50 to-indigo-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                placeholder="e.g., Software Engineer, Marketing Manager"
              />
            </div>

            {/* ÂºÄÂßãÊó•Êúü */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Start Date
              </label>
              <input
                type="month"
                value={newExperience.start_date}
                onChange={(e) => setNewExperience({...newExperience, start_date: e.target.value})}
                className="w-full bg-gradient-to-r from-amber-50 to-orange-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
              />
            </div>

            {/* ÁªìÊùüÊó•Êúü */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                End Date
              </label>
              <div className="space-y-3">
                <input
                  type="month"
                  value={newExperience.end_date}
                  onChange={(e) => setNewExperience({...newExperience, end_date: e.target.value})}
                  disabled={newExperience.is_current}
                  className={`w-full border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 transition-all duration-300 shadow-sm hover:shadow-md ${
                    newExperience.is_current 
                      ? 'bg-slate-100 cursor-not-allowed text-slate-400' 
                      : 'bg-gradient-to-r from-red-50 to-pink-50 focus:ring-red-500 focus:bg-white'
                  }`}
                />
                <label className="flex items-center gap-3">
                  <input
                    type="checkbox"
                    checked={newExperience.is_current}
                    onChange={(e) => setNewExperience({...newExperience, is_current: e.target.checked})}
                    className="w-4 h-4 text-emerald-600 border-slate-300 rounded focus:ring-emerald-500 focus:ring-2"
                  />
                  <span className="text-sm text-slate-600 font-medium">I currently work here</span>
                </label>
              </div>
            </div>

            {/* Â∑•‰ΩúÊèèËø∞ */}
            <div className="md:col-span-2">
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Job Description
              </label>
              <textarea
                value={newExperience.description}
                onChange={(e) => setNewExperience({...newExperience, description: e.target.value})}
                rows={4}
                className="w-full bg-gradient-to-r from-purple-50 to-violet-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:bg-white transition-all duration-300 resize-vertical shadow-sm hover:shadow-md"
                placeholder="Describe your role, responsibilities, and key activities..."
              />
            </div>

            {/* ÊàêÂ∞±ÁÆ°ÁêÜ */}
            <div className="md:col-span-2">
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                Key Achievements
              </label>
              
              {/* ÊàêÂ∞±ËæìÂÖ• */}
              <div className="flex gap-3 mb-4">
                <input
                  type="text"
                  value={newAchievement}
                  onChange={(e) => setNewAchievement(e.target.value)}
                  className="flex-1 bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="Add a specific achievement or accomplishment..."
                  onKeyPress={(e) => e.key === 'Enter' && addAchievementToNew()}
                />
                <button
                  onClick={addAchievementToNew}
                  className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-6 py-3 rounded-xl font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg"
                >
                  Add
                </button>
              </div>

              {/* ÊàêÂ∞±ÂàóË°®ÊòæÁ§∫ */}
              {newExperience.achievements.length > 0 && (
                <div className="space-y-3">
                  {newExperience.achievements.map((achievement, index) => (
                    <div key={index} className="group flex items-start gap-3 p-3 bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 rounded-xl transition-all duration-300">
                      <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                      <span className="flex-1 text-slate-700">{achievement}</span>
                      <button
                        onClick={() => removeAchievementFromNew(index)}
                        className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 hover:bg-red-100 p-1 rounded transition-all duration-200"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <button
            onClick={addExperience}
            className="bg-gradient-to-r from-emerald-500 to-teal-600 text-white px-8 py-3 rounded-xl font-medium hover:from-emerald-600 hover:to-teal-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
          >
            Add Experience Entry
          </button>
        </div>

        {/* Â∑•‰ΩúÁªèÂéÜÂ±ïÁ§∫Âå∫Âüü */}
        <div className="space-y-6">
          {experience.length === 0 ? (
            <div className="text-center py-16 bg-white/50 backdrop-blur-sm border-2 border-dashed border-slate-300 rounded-3xl">
              <div className="w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg className="w-12 h-12 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V8a2 2 0 012-2V6" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-slate-600 mb-2">Ready to Build Your Career Story?</h3>
              <p className="text-slate-500 text-lg">Add your professional experience to showcase your expertise</p>
            </div>
          ) : (
            <div className="space-y-6">
              {experience.map((exp, index) => (
                <div key={index} className="group bg-white/70 backdrop-blur-sm border border-slate-200 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300">
                  {editingIndex === index ? (
                    // ÁºñËæëÊ®°Âºè
                    <div className="p-8">
                      <div className="flex items-center gap-3 mb-6">
                        <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
                          <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                          </svg>
                        </div>
                        <h3 className="text-xl font-bold text-slate-800">Edit Experience</h3>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Company</label>
                          <input
                            type="text"
                            value={exp.company}
                            onChange={(e) => updateExperience(index, 'company', e.target.value)}
                            className="w-full bg-gradient-to-r from-emerald-50 to-teal-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Position</label>
                          <input
                            type="text"
                            value={exp.position}
                            onChange={(e) => updateExperience(index, 'position', e.target.value)}
                            className="w-full bg-gradient-to-r from-blue-50 to-indigo-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Start Date</label>
                          <input
                            type="month"
                            value={exp.start_date}
                            onChange={(e) => updateExperience(index, 'start_date', e.target.value)}
                            className="w-full bg-gradient-to-r from-amber-50 to-orange-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">End Date</label>
                          <div className="space-y-2">
                            <input
                              type="month"
                              value={exp.end_date}
                              onChange={(e) => updateExperience(index, 'end_date', e.target.value)}
                              disabled={exp.is_current}
                              className={`w-full border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 transition-all duration-300 ${
                                exp.is_current 
                                  ? 'bg-slate-100 cursor-not-allowed text-slate-400' 
                                  : 'bg-gradient-to-r from-red-50 to-pink-50 focus:ring-red-500 focus:bg-white'
                              }`}
                            />
                            <label className="flex items-center gap-2">
                              <input
                                type="checkbox"
                                checked={exp.is_current || false}
                                onChange={(e) => updateExperience(index, 'is_current', e.target.checked)}
                                className="w-4 h-4 text-emerald-600 border-slate-300 rounded focus:ring-emerald-500"
                              />
                              <span className="text-sm text-slate-600">Currently working here</span>
                            </label>
                          </div>
                        </div>
                        <div className="md:col-span-2">
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Description</label>
                          <textarea
                            value={exp.description}
                            onChange={(e) => updateExperience(index, 'description', e.target.value)}
                            rows={4}
                            className="w-full bg-gradient-to-r from-purple-50 to-violet-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:bg-white transition-all duration-300 resize-vertical"
                          />
                        </div>
                      </div>
                      
                      <div className="flex gap-4">
                        <button
                          onClick={() => setEditingIndex(-1)}
                          className="bg-gradient-to-r from-emerald-500 to-green-600 text-white px-6 py-3 rounded-xl font-medium hover:from-emerald-600 hover:to-green-700 transition-all duration-300 transform hover:scale-105"
                        >
                          Save Changes
                        </button>
                        <button
                          onClick={() => setEditingIndex(-1)}
                          className="bg-gradient-to-r from-slate-500 to-gray-600 text-white px-6 py-3 rounded-xl font-medium hover:from-slate-600 hover:to-gray-700 transition-all duration-300 transform hover:scale-105"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  ) : (
                    // ÊòæÁ§∫Ê®°Âºè
                    <div className="p-8">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-start gap-4 flex-1">
                          <div className="w-16 h-16 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center text-2xl shadow-lg">
                            {getCompanyIcon(exp.company)}
                          </div>
                          <div className="flex-1">
                            <h3 className="text-xl font-bold text-slate-800 mb-1">{exp.position}</h3>
                            <p className="text-lg font-medium text-slate-600 mb-2">{exp.company}</p>
                            <div className="flex items-center flex-wrap gap-4 text-sm">
                              <div className="flex items-center gap-2 bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                {formatDate(exp.start_date)} - {exp.is_current ? 'Present' : formatDate(exp.end_date)}
                              </div>
                              {exp.is_current && (
                                <div className="flex items-center gap-2 bg-emerald-100 text-emerald-800 px-3 py-1 rounded-full font-medium">
                                  <div className="w-2 h-2 bg-emerald-500 rounded-full animate-pulse"></div>
                                  Current Position
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300">
                          <button
                            onClick={() => setEditingIndex(index)}
                            className="text-blue-500 hover:text-blue-700 hover:bg-blue-50 p-2 rounded-lg transition-all duration-200"
                            title="Edit"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                          <button
                            onClick={() => removeExperience(index)}
                            className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all duration-200"
                            title="Delete"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </div>

                      {exp.description && (
                        <div className="mb-6 p-4 bg-slate-50 rounded-xl">
                          <p className="text-slate-600 leading-relaxed whitespace-pre-line">{exp.description}</p>
                        </div>
                      )}

                      {/* ÊàêÂ∞±Â±ïÁ§∫ */}
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <h4 className="text-lg font-semibold text-slate-700 flex items-center gap-2">
                            <svg className="w-5 h-5 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                            Key Achievements & Impact
                          </h4>
                        </div>

                        {exp.achievements && exp.achievements.length > 0 && (
                          <div className="grid gap-3">
                            {exp.achievements.map((achievement, achIndex) => (
                              <div key={achIndex} className="group/achievement flex items-start gap-3 p-3 bg-gradient-to-r from-emerald-50 to-green-50 hover:from-emerald-100 hover:to-green-100 rounded-xl transition-all duration-300">
                                <div className="w-2 h-2 bg-emerald-500 rounded-full mt-2 flex-shrink-0"></div>
                                <span className="flex-1 text-slate-700">{achievement}</span>
                                <button
                                  onClick={() => removeAchievementFromExisting(index, achIndex)}
                                  className="opacity-0 group-hover/achievement:opacity-100 text-red-500 hover:text-red-700 hover:bg-red-100 p-1 rounded transition-all duration-200"
                                  title="Remove achievement"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                  </svg>
                                </button>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* Ê∑ªÂä†ÊàêÂ∞±Âà∞Áé∞ÊúâÁªèÂéÜ */}
                        <div className="flex gap-3">
                          <input
                            type="text"
                            value={newAchievement}
                            onChange={(e) => setNewAchievement(e.target.value)}
                            className="flex-1 bg-white border-0 rounded-xl px-4 py-2 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all duration-300 shadow-sm hover:shadow-md"
                            placeholder="Add an achievement for this role..."
                            onKeyPress={(e) => {
                              if (e.key === 'Enter') {
                                addAchievementToExisting(index, newAchievement);
                                setNewAchievement('');
                              }
                            }}
                          />
                          <button
                            onClick={() => {
                              addAchievementToExisting(index, newAchievement);
                              setNewAchievement('');
                            }}
                            disabled={!newAchievement.trim()}
                            className="bg-gradient-to-r from-emerald-500 to-green-600 text-white px-4 py-2 rounded-xl font-medium hover:from-emerald-600 hover:to-green-700 disabled:from-slate-300 disabled:to-slate-400 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 disabled:transform-none"
                          >
                            Add
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* ‰∏ì‰∏öÂª∫ËÆÆÂç°Áâá */}
        {experience.length > 0 && (
          <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-2xl p-6 shadow-lg">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-md">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div className="flex-1">
                <h4 className="text-xl font-bold text-amber-900 mb-3">Career Excellence Tips</h4>
                <div className="grid md:grid-cols-2 gap-4 text-amber-800">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>List experiences in reverse chronological order</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Use action verbs to describe accomplishments</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Quantify achievements with numbers when possible</span>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Focus on results and impact, not just duties</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Tailor descriptions to match job requirements</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Highlight leadership and teamwork examples</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* ÁªüËÆ°‰ª™Ë°®Êùø */}
        {experience.length > 0 && (
          <div className="bg-gradient-to-r from-slate-900 to-slate-800 text-white rounded-2xl p-6 shadow-xl">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-emerald-400 mb-1">
                  {experience.length}
                </div>
                <div className="text-slate-300">Experience Entries</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-400 mb-1">
                  {experience.reduce((total, exp) => total + (exp.achievements?.length || 0), 0)}
                </div>
                <div className="text-slate-300">Total Achievements</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-400 mb-1">
                  {experience.filter(exp => exp.is_current).length}
                </div>
                <div className="text-slate-300">Current Positions</div>
              </div>
              <div className="text-center">
                <div className="flex items-center justify-center gap-2 text-amber-400">
                  <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  <span className="text-slate-300">Career Updated</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}