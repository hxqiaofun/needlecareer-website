'use client';

import { useState } from 'react';
import { ResumeDetail } from '@/lib/types/resume';

interface Certification {
  name: string;
  issuer: string;
  date: string;
  credential_id?: string;
  url?: string;
}

interface Language {
  language: string;
  proficiency: string;
}

interface AdditionalInfoSectionProps {
  data: ResumeDetail;
  onChange: (field: keyof ResumeDetail, value: any) => void;
}

export default function AdditionalInfoSection({ data, onChange }: AdditionalInfoSectionProps) {
  const [newCertification, setNewCertification] = useState<Certification>({
    name: '',
    issuer: '',
    date: '',
    credential_id: '',
    url: ''
  });

  const [newLanguage, setNewLanguage] = useState<Language>({
    language: '',
    proficiency: ''
  });

  const certifications: Certification[] = (data.certifications as Certification[]) || [];
  const languages: Language[] = (data.languages as Language[]) || [];

  // ËØ≠Ë®ÄÁÜüÁªÉÁ®ãÂ∫¶ÈÄâÈ°π
  const proficiencyLevels = [
    { value: 'native', label: 'Native' },
    { value: 'fluent', label: 'Fluent' },
    { value: 'advanced', label: 'Advanced' },
    { value: 'intermediate', label: 'Intermediate' },
    { value: 'basic', label: 'Basic' }
  ];

  // Â∏∏ËßÅËØ≠Ë®ÄÂàóË°®
  const commonLanguages = [
    'English', 'Spanish', 'French', 'German', 'Italian', 'Portuguese',
    'Chinese (Mandarin)', 'Chinese (Cantonese)', 'Japanese', 'Korean',
    'Arabic', 'Russian', 'Hindi', 'Dutch', 'Swedish', 'Norwegian'
  ];

  // Ëé∑ÂèñËÆ§ËØÅÂõæÊ†á
  const getCertificationIcon = (name: string, issuer: string) => {
    const combined = (name + ' ' + issuer).toLowerCase();
    if (combined.includes('aws') || combined.includes('amazon')) return '‚òÅÔ∏è';
    if (combined.includes('google') || combined.includes('gcp')) return 'üîç';
    if (combined.includes('microsoft') || combined.includes('azure')) return 'üñ•Ô∏è';
    if (combined.includes('docker') || combined.includes('kubernetes')) return 'üê≥';
    if (combined.includes('security') || combined.includes('cissp')) return 'üîí';
    if (combined.includes('project') || combined.includes('pmp')) return 'üìã';
    if (combined.includes('data') || combined.includes('analytics')) return 'üìä';
    if (combined.includes('scrum') || combined.includes('agile')) return 'üîÑ';
    return 'üèÜ';
  };

  // Ëé∑ÂèñËØ≠Ë®ÄÊ†áÂøó
  const getLanguageFlag = (language: string) => {
    const lang = language.toLowerCase();
    if (lang.includes('english')) return 'üá∫üá∏';
    if (lang.includes('spanish')) return 'üá™üá∏';
    if (lang.includes('french')) return 'üá´üá∑';
    if (lang.includes('german')) return 'üá©üá™';
    if (lang.includes('italian')) return 'üáÆüáπ';
    if (lang.includes('portuguese')) return 'üáßüá∑';
    if (lang.includes('chinese')) return 'üá®üá≥';
    if (lang.includes('japanese')) return 'üáØüáµ';
    if (lang.includes('korean')) return 'üá∞üá∑';
    if (lang.includes('arabic')) return 'üá∏üá¶';
    if (lang.includes('russian')) return 'üá∑üá∫';
    if (lang.includes('hindi')) return 'üáÆüá≥';
    if (lang.includes('dutch')) return 'üá≥üá±';
    if (lang.includes('swedish')) return 'üá∏üá™';
    if (lang.includes('norwegian')) return 'üá≥üá¥';
    return 'üåç';
  };

  // Ê∑ªÂä†ËØÅ‰π¶
  const addCertification = () => {
    if (!newCertification.name.trim() || !newCertification.issuer.trim()) {
      alert('Please fill in certification name and issuer.');
      return;
    }

    const updatedCertifications = [...certifications, { ...newCertification }];
    onChange('certifications', updatedCertifications);
    
    setNewCertification({
      name: '',
      issuer: '',
      date: '',
      credential_id: '',
      url: ''
    });
  };

  // Âà†Èô§ËØÅ‰π¶
  const removeCertification = (index: number) => {
    if (confirm('Are you sure you want to delete this certification?')) {
      const updatedCertifications = [...certifications];
      updatedCertifications.splice(index, 1);
      onChange('certifications', updatedCertifications);
    }
  };

  // Ê∑ªÂä†ËØ≠Ë®Ä
  const addLanguage = () => {
    if (!newLanguage.language.trim() || !newLanguage.proficiency) {
      alert('Please select a language and proficiency level.');
      return;
    }

    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
    if (languages.some(lang => lang.language.toLowerCase() === newLanguage.language.toLowerCase())) {
      alert('This language is already added.');
      return;
    }

    const updatedLanguages = [...languages, { ...newLanguage }];
    onChange('languages', updatedLanguages);
    
    setNewLanguage({
      language: '',
      proficiency: ''
    });
  };

  // Âà†Èô§ËØ≠Ë®Ä
  const removeLanguage = (index: number) => {
    if (confirm('Are you sure you want to delete this language?')) {
      const updatedLanguages = [...languages];
      updatedLanguages.splice(index, 1);
      onChange('languages', updatedLanguages);
    }
  };

  // Êõ¥Êñ∞ÊñáÊú¨Â≠óÊÆµ
  const updateTextField = (field: keyof ResumeDetail, value: string) => {
    onChange(field, value);
  };

  // Ê†ºÂºèÂåñÊó•Êúü
  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const date = new Date(dateStr + '-01');
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-rose-50">
      <div className="max-w-6xl mx-auto p-8 space-y-8">
        {/* Áé∞‰ª£ÂåñÊ†áÈ¢òÂå∫Âüü */}
        <div className="relative">
          <div className="absolute inset-0 bg-gradient-to-r from-rose-500/10 to-pink-500/10 rounded-3xl blur-3xl"></div>
          <div className="relative bg-white/80 backdrop-blur-sm border border-white/50 rounded-3xl p-8 shadow-xl">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-rose-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                </svg>
              </div>
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-900 via-slate-700 to-rose-600 bg-clip-text text-transparent">
                  Professional Profile Plus
                </h1>
                <p className="text-slate-600 text-lg mt-2">
                  Complete your profile with certifications, languages, and personal insights
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-6 text-sm text-slate-500">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <span>Credential Verification</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-rose-400 rounded-full"></div>
                <span>Global Communication</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <span>Personal Branding</span>
              </div>
            </div>
          </div>
        </div>

        {/* ËØÅ‰π¶ÂíåËÆ§ËØÅ */}
        <div className="bg-white/70 backdrop-blur-sm border border-amber-100 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-8">
            <div className="w-10 h-10 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Certifications & Awards</h2>
          </div>

          {/* Ê∑ªÂä†ËØÅ‰π¶Ë°®Âçï */}
          <div className="bg-gradient-to-r from-amber-50 to-orange-50 rounded-xl p-6 mb-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                  </svg>
                  Certification Name
                  <span className="text-red-500 ml-1">*</span>
                </label>
                <input
                  type="text"
                  value={newCertification.name}
                  onChange={(e) => setNewCertification({...newCertification, name: e.target.value})}
                  className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-amber-500 transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="e.g., AWS Certified Developer, Google Analytics IQ"
                />
              </div>

              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                  </svg>
                  Issuing Organization
                  <span className="text-red-500 ml-1">*</span>
                </label>
                <input
                  type="text"
                  value={newCertification.issuer}
                  onChange={(e) => setNewCertification({...newCertification, issuer: e.target.value})}
                  className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="e.g., Amazon Web Services, Google"
                />
              </div>

              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Date Earned
                </label>
                <input
                  type="month"
                  value={newCertification.date}
                  onChange={(e) => setNewCertification({...newCertification, date: e.target.value})}
                  className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all duration-300 shadow-sm hover:shadow-md"
                />
              </div>

              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  Credential ID (Optional)
                </label>
                <input
                  type="text"
                  value={newCertification.credential_id}
                  onChange={(e) => setNewCertification({...newCertification, credential_id: e.target.value})}
                  className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="Certificate ID or Badge number"
                />
              </div>

              <div className="md:col-span-2">
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-teal-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                  </svg>
                  Certificate URL (Optional)
                </label>
                <input
                  type="url"
                  value={newCertification.url}
                  onChange={(e) => setNewCertification({...newCertification, url: e.target.value})}
                  className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-teal-500 transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="Link to certificate or badge"
                />
              </div>
            </div>

            <button
              onClick={addCertification}
              className="bg-gradient-to-r from-amber-500 to-orange-600 text-white px-8 py-3 rounded-xl font-medium hover:from-amber-600 hover:to-orange-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              Add Certification
            </button>
          </div>

          {/* ËØÅ‰π¶ÂàóË°® */}
          {certifications.length > 0 && (
            <div className="grid gap-4">
              {certifications.map((cert, index) => (
                <div key={index} className="group bg-gradient-to-r from-amber-50 to-orange-50 hover:from-amber-100 hover:to-orange-100 border border-amber-200 rounded-xl p-4 transition-all duration-300">
                  <div className="flex items-start justify-between">
                    <div className="flex items-start gap-4 flex-1">
                      <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center text-xl shadow-md">
                        {getCertificationIcon(cert.name, cert.issuer)}
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-1">
                          <h4 className="font-bold text-slate-800">{cert.name}</h4>
                          {cert.url && (
                            <a
                              href={cert.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-amber-600 hover:text-amber-800 hover:bg-amber-200 p-1 rounded-lg transition-all duration-200"
                              title="View Certificate"
                            >
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                              </svg>
                            </a>
                          )}
                        </div>
                        <p className="text-slate-600 font-medium mb-1">{cert.issuer}</p>
                        <div className="flex items-center flex-wrap gap-3 text-sm">
                          {cert.date && (
                            <div className="flex items-center gap-1 text-emerald-700 bg-emerald-100 px-2 py-1 rounded-full">
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                              </svg>
                              Earned: {formatDate(cert.date)}
                            </div>
                          )}
                          {cert.credential_id && (
                            <div className="flex items-center gap-1 text-purple-700 bg-purple-100 px-2 py-1 rounded-full">
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                              </svg>
                              ID: {cert.credential_id}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    <button
                      onClick={() => removeCertification(index)}
                      className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 hover:bg-red-100 p-2 rounded-lg transition-all duration-200"
                      title="Delete"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* ËØ≠Ë®ÄËÉΩÂäõ */}
        <div className="bg-white/70 backdrop-blur-sm border border-blue-100 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-8">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Languages</h2>
          </div>

          {/* Ê∑ªÂä†ËØ≠Ë®ÄË°®Âçï */}
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 mb-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
              <div className="md:col-span-2">
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129" />
                  </svg>
                  Language
                  <span className="text-red-500 ml-1">*</span>
                </label>
                <div className="relative">
                  <input
                    type="text"
                    value={newLanguage.language}
                    onChange={(e) => setNewLanguage({...newLanguage, language: e.target.value})}
                    className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 shadow-sm hover:shadow-md"
                    placeholder="Select or type a language"
                    list="languages-list"
                  />
                  <datalist id="languages-list">
                    {commonLanguages.map((lang) => (
                      <option key={lang} value={lang} />
                    ))}
                  </datalist>
                </div>
              </div>

              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  Proficiency
                  <span className="text-red-500 ml-1">*</span>
                </label>
                <select
                  value={newLanguage.proficiency}
                  onChange={(e) => setNewLanguage({...newLanguage, proficiency: e.target.value})}
                  className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all duration-300 shadow-sm hover:shadow-md"
                >
                  <option value="">Select level</option>
                  {proficiencyLevels.map((level) => (
                    <option key={level.value} value={level.value}>
                      {level.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <button
              onClick={addLanguage}
              className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-8 py-3 rounded-xl font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              Add Language
            </button>
          </div>

          {/* ËØ≠Ë®ÄÂàóË°® */}
          {languages.length > 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {languages.map((lang, index) => {
                const proficiencyColors = {
                  native: 'from-emerald-100 to-green-100 text-emerald-800',
                  fluent: 'from-blue-100 to-indigo-100 text-blue-800',
                  advanced: 'from-purple-100 to-violet-100 text-purple-800',
                  intermediate: 'from-amber-100 to-yellow-100 text-amber-800',
                  basic: 'from-slate-100 to-gray-100 text-slate-800'
                };
                
                return (
                  <div key={index} className="group bg-gradient-to-r from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100 border border-blue-200 rounded-xl p-4 transition-all duration-300">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="text-2xl">{getLanguageFlag(lang.language)}</div>
                        <div>
                          <h4 className="font-bold text-slate-800">{lang.language}</h4>
                          <div className={`inline-block px-3 py-1 text-xs rounded-full font-medium bg-gradient-to-r ${proficiencyColors[lang.proficiency as keyof typeof proficiencyColors] || proficiencyColors.basic} mt-1`}>
                            {proficiencyLevels.find(p => p.value === lang.proficiency)?.label || lang.proficiency}
                          </div>
                        </div>
                      </div>
                      <button
                        onClick={() => removeLanguage(index)}
                        className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 hover:bg-red-100 p-2 rounded-lg transition-all duration-200"
                        title="Delete"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* ÂÖ¥Ë∂£Áà±Â•Ω */}
        <div className="bg-white/70 backdrop-blur-sm border border-emerald-100 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 bg-gradient-to-br from-emerald-500 to-green-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Interests & Hobbies</h2>
          </div>
          
          <div className="bg-gradient-to-r from-emerald-50 to-green-50 rounded-xl p-6">
            <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
              <svg className="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
              Personal Interests
            </label>
            <textarea
              value={data.interests || ''}
              onChange={(e) => updateTextField('interests', e.target.value)}
              rows={4}
              className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all duration-300 resize-vertical shadow-sm hover:shadow-md"
              placeholder="Share your hobbies, interests, volunteer work, or other activities that showcase your personality and values..."
            />
            <div className="flex items-center justify-between mt-2 text-xs">
              <span className="text-slate-500">
                {(data.interests || '').length}/500 characters
              </span>
              <div className="flex items-center gap-1 text-emerald-600">
                <div className="w-1 h-1 bg-emerald-400 rounded-full"></div>
                <span>Auto-saving</span>
              </div>
            </div>
          </div>
        </div>

        {/* Êé®Ëçê‰∫∫‰ø°ÊÅØ */}
        <div className="bg-white/70 backdrop-blur-sm border border-purple-100 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">References</h2>
          </div>
          
          <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-6">
            <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
              <svg className="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
              Reference Contacts
            </label>
            <textarea
              value={data.reference_contacts || ''}
              onChange={(e) => updateTextField('reference_contacts', e.target.value)}
              rows={4}
              className="w-full bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all duration-300 resize-vertical shadow-sm hover:shadow-md"
              placeholder="You can list reference contacts here, or simply state 'Available upon request'..."
            />
            <p className="text-xs text-slate-500 mt-2">
              Tip: It's often better to state "References available upon request" and provide them when asked.
            </p>
          </div>
        </div>

        {/* ‰∏ì‰∏öÂª∫ËÆÆÂç°Áâá */}
        <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-2xl p-6 shadow-lg">
          <div className="flex items-start gap-4">
            <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-md">
              <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
            </div>
            <div className="flex-1">
              <h4 className="text-xl font-bold text-amber-900 mb-3">Profile Enhancement Tips</h4>
              <div className="grid md:grid-cols-2 gap-4 text-amber-800">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                    <span>Include relevant certifications and licenses</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                    <span>List languages if relevant to your target role</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                    <span>Share interests that show leadership or teamwork</span>
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                    <span>Keep references ready but don't include contact details</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                    <span>Only add information that strengthens your profile</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                    <span>Keep certifications current and relevant</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* ÁªüËÆ°‰ª™Ë°®Êùø */}
        <div className="bg-gradient-to-r from-slate-900 to-slate-800 text-white rounded-2xl p-6 shadow-xl">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="text-center">
              <div className="text-3xl font-bold text-amber-400 mb-1">
                {certifications.length}
              </div>
              <div className="text-slate-300">Certifications</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-blue-400 mb-1">
                {languages.length}
              </div>
              <div className="text-slate-300">Languages</div>
            </div>
            <div className="text-center">
              <div className="text-3xl font-bold text-emerald-400 mb-1">
                {data.interests ? '1' : '0'}
              </div>
              <div className="text-slate-300">Personal Interests</div>
            </div>
            <div className="text-center">
              <div className="flex items-center justify-center gap-2 text-rose-400">
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <span className="text-slate-300">Profile Enhanced</span>
              </div>
            </div>
          </div>
        </div>

        {/* ÂÆåÊàêÁä∂ÊÄÅÊòæÁ§∫ */}
        {certifications.length > 0 || languages.length > 0 || data.interests || data.reference_contacts ? (
          <div className="bg-gradient-to-r from-emerald-50 to-green-50 border border-emerald-200 rounded-2xl p-6 shadow-lg">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-emerald-500 to-green-600 rounded-xl flex items-center justify-center shadow-md">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                </svg>
              </div>
              <div>
                <h4 className="text-xl font-bold text-emerald-900">Excellent Work!</h4>
                <p className="text-emerald-800 mt-1">
                  You've successfully enhanced your profile with additional information that will help you stand out. 
                  Your resume is now more comprehensive and compelling!
                </p>
              </div>
            </div>
          </div>
        ) : (
          <div className="text-center py-16 bg-white/50 backdrop-blur-sm border-2 border-dashed border-slate-300 rounded-3xl">
            <div className="w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-12 h-12 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
              </svg>
            </div>
            <h3 className="text-2xl font-bold text-slate-600 mb-2">Ready to Stand Out?</h3>
            <p className="text-slate-500 text-lg">
              Add certifications, languages, and other relevant information to strengthen your professional profile
            </p>
          </div>
        )}
      </div>
    </div>
  );
}