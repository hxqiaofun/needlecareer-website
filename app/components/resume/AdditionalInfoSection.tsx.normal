'use client';

import { useState } from 'react';

interface Certification {
  name: string;
  issuer: string;
  date: string;
  credential_id?: string;
  url?: string;
}

interface Language {
  language: string;
  proficiency: string;
}

interface ResumeDetail {
  certifications?: Certification[];
  languages?: Language[];
  interests?: string;
  reference_contacts?: string;
}

interface AdditionalInfoSectionProps {
  data: ResumeDetail;
  onChange: (field: keyof ResumeDetail, value: any) => void;
}

export default function AdditionalInfoSection({ data, onChange }: AdditionalInfoSectionProps) {
  const [newCertification, setNewCertification] = useState<Certification>({
    name: '',
    issuer: '',
    date: '',
    credential_id: '',
    url: ''
  });

  const [newLanguage, setNewLanguage] = useState<Language>({
    language: '',
    proficiency: ''
  });

  const certifications: Certification[] = (data.certifications as Certification[]) || [];
  const languages: Language[] = (data.languages as Language[]) || [];

  // ËØ≠Ë®ÄÁÜüÁªÉÁ®ãÂ∫¶ÈÄâÈ°π
  const proficiencyLevels = [
    { value: 'native', label: 'Native' },
    { value: 'fluent', label: 'Fluent' },
    { value: 'advanced', label: 'Advanced' },
    { value: 'intermediate', label: 'Intermediate' },
    { value: 'basic', label: 'Basic' }
  ];

  // Â∏∏ËßÅËØ≠Ë®ÄÂàóË°®
  const commonLanguages = [
    'English', 'Spanish', 'French', 'German', 'Italian', 'Portuguese',
    'Chinese (Mandarin)', 'Chinese (Cantonese)', 'Japanese', 'Korean',
    'Arabic', 'Russian', 'Hindi', 'Dutch', 'Swedish', 'Norwegian'
  ];

  // Ê∑ªÂä†ËØÅ‰π¶
  const addCertification = () => {
    if (!newCertification.name.trim() || !newCertification.issuer.trim()) {
      alert('Please fill in certification name and issuer.');
      return;
    }

    const updatedCertifications = [...certifications, { ...newCertification }];
    onChange('certifications', updatedCertifications);
    
    setNewCertification({
      name: '',
      issuer: '',
      date: '',
      credential_id: '',
      url: ''
    });
  };

  // Âà†Èô§ËØÅ‰π¶
  const removeCertification = (index: number) => {
    if (confirm('Are you sure you want to delete this certification?')) {
      const updatedCertifications = [...certifications];
      updatedCertifications.splice(index, 1);
      onChange('certifications', updatedCertifications);
    }
  };

  // Ê∑ªÂä†ËØ≠Ë®Ä
  const addLanguage = () => {
    if (!newLanguage.language.trim() || !newLanguage.proficiency) {
      alert('Please select a language and proficiency level.');
      return;
    }

    // Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®
    if (languages.some(lang => lang.language.toLowerCase() === newLanguage.language.toLowerCase())) {
      alert('This language is already added.');
      return;
    }

    const updatedLanguages = [...languages, { ...newLanguage }];
    onChange('languages', updatedLanguages);
    
    setNewLanguage({
      language: '',
      proficiency: ''
    });
  };

  // Âà†Èô§ËØ≠Ë®Ä
  const removeLanguage = (index: number) => {
    if (confirm('Are you sure you want to delete this language?')) {
      const updatedLanguages = [...languages];
      updatedLanguages.splice(index, 1);
      onChange('languages', updatedLanguages);
    }
  };

  // Êõ¥Êñ∞ÊñáÊú¨Â≠óÊÆµ
  const updateTextField = (field: keyof ResumeDetail, value: string) => {
    onChange(field, value);
  };

  // Ê†ºÂºèÂåñÊó•Êúü
  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
  };

  return (
    <div className="space-y-8 bg-white">
      {/* ËäÇÊ†áÈ¢ò */}
      <div className="border-b border-gray-200 pb-4">
        <h2 className="text-2xl font-bold text-black">Additional Information</h2>
        <p className="text-gray-600 mt-1 text-sm">
          Add certifications, languages, interests, and other relevant information
        </p>
      </div>

      {/* ËØÅ‰π¶ÂíåËÆ§ËØÅ */}
      <div className="space-y-6">
        <div>
          <div className="bg-white border-2 border-[#c8ffd2] rounded-lg p-8 shadow-sm transition-opacity">
            <h3 className="text-xl font-bold text-black mb-6 flex items-center gap-3">
              <div className="w-16 h-16 bg-[#c8ffd2] rounded-full flex items-center justify-center">
                <span className="text-2xl">üèÜ</span>
              </div>
              Certifications & Awards
            </h3>

            {/* Ê∑ªÂä†ËØÅ‰π¶Ë°®Âçï */}
            <div className="bg-white rounded-lg p-6 mb-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-800 mb-2">
                    Certification Name <span className="text-red-700">*</span>
                  </label>
                  <input
                    type="text"
                    value={newCertification.name}
                    onChange={(e) => setNewCertification({...newCertification, name: e.target.value})}
                    className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-full focus:outline-none focus:ring-2 focus:ring-black text-sm"
                    placeholder="e.g., AWS Certified Developer, Google Analytics IQ"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-800 mb-2">
                    Issuing Organization <span className="text-red-700">*</span>
                  </label>
                  <input
                    type="text"
                    value={newCertification.issuer}
                    onChange={(e) => setNewCertification({...newCertification, issuer: e.target.value})}
                    className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-full focus:outline-none focus:ring-2 focus:ring-black text-sm"
                    placeholder="e.g., Amazon Web Services, Google"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-800 mb-2">
                    Date Earned
                  </label>
                  <input
                    type="month"
                    value={newCertification.date}
                    onChange={(e) => setNewCertification({...newCertification, date: e.target.value})}
                    className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-full focus:outline-none focus:ring-2 focus:ring-black text-sm"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-800 mb-2">
                    Credential ID (Optional)
                  </label>
                  <input
                    type="text"
                    value={newCertification.credential_id}
                    onChange={(e) => setNewCertification({...newCertification, credential_id: e.target.value})}
                    className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-full focus:outline-none focus:ring-2 focus:ring-black text-sm"
                    placeholder="Certificate ID or Badge number"
                  />
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-800 mb-2">
                    Certificate URL (Optional)
                  </label>
                  <input
                    type="url"
                    value={newCertification.url}
                    onChange={(e) => setNewCertification({...newCertification, url: e.target.value})}
                    className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-full focus:outline-none focus:ring-2 focus:ring-black text-sm"
                    placeholder="Link to certificate or badge"
                  />
                </div>
              </div>

              <button
                onClick={addCertification}
                className="bg-black text-[#c8ffd2] px-6 py-2 font-bold hover:bg-gray-800 transition-colors"
              >
                Add Certification
              </button>
            </div>

            {/* ËØÅ‰π¶ÂàóË°® */}
            {certifications.length > 0 && (
              <div className="space-y-4">
                {certifications.map((cert, index) => (
                  <div key={index} className="border-2 border-[#c8ffd2] rounded-lg p-4 bg-white">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <h4 className="font-bold text-black">{cert.name}</h4>
                          {cert.url && (
                            <a
                              href={cert.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-black hover:text-gray-600 transition-colors"
                              title="View Certificate"
                            >
                              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                              </svg>
                            </a>
                          )}
                        </div>
                        <p className="text-gray-800 text-sm">{cert.issuer}</p>
                        <div className="flex items-center gap-4 text-xs text-gray-600 mt-1">
                          {cert.date && <span>Earned: {formatDate(cert.date)}</span>}
                          {cert.credential_id && <span>ID: {cert.credential_id}</span>}
                        </div>
                      </div>
                      <button
                        onClick={() => removeCertification(index)}
                        className="text-red-700 hover:text-red-800 transition-colors"
                        title="Delete"
                      >
                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* ËØ≠Ë®ÄËÉΩÂäõ */}
      <div className="space-y-6">
        <div>
          <div className="bg-white border-2 border-[#c8ffd2] rounded-lg p-8 shadow-sm transition-opacity">
            <h3 className="text-xl font-bold text-black mb-6 flex items-center gap-3">
              <div className="w-16 h-16 bg-[#c8ffd2] rounded-full flex items-center justify-center">
                <span className="text-2xl">üåç</span>
              </div>
              Languages
            </h3>

            {/* Ê∑ªÂä†ËØ≠Ë®ÄË°®Âçï */}
            <div className="bg-white rounded-lg p-6 mb-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-800 mb-2">
                    Language <span className="text-red-700">*</span>
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={newLanguage.language}
                      onChange={(e) => setNewLanguage({...newLanguage, language: e.target.value})}
                      className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-full focus:outline-none focus:ring-2 focus:ring-black text-sm"
                      placeholder="Select or type a language"
                      list="languages-list"
                    />
                    <datalist id="languages-list">
                      {commonLanguages.map((lang) => (
                        <option key={lang} value={lang} />
                      ))}
                    </datalist>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-800 mb-2">
                    Proficiency <span className="text-red-700">*</span>
                  </label>
                  <select
                    value={newLanguage.proficiency}
                    onChange={(e) => setNewLanguage({...newLanguage, proficiency: e.target.value})}
                    className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-full focus:outline-none focus:ring-2 focus:ring-black text-sm"
                  >
                    <option value="">Select level</option>
                    {proficiencyLevels.map((level) => (
                      <option key={level.value} value={level.value}>
                        {level.label}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              <button
                onClick={addLanguage}
                className="bg-black text-[#c8ffd2] px-6 py-2 font-bold hover:bg-gray-800 transition-colors"
              >
                Add Language
              </button>
            </div>

            {/* ËØ≠Ë®ÄÂàóË°® */}
            {languages.length > 0 && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {languages.map((lang, index) => (
                  <div key={index} className="border-2 border-[#c8ffd2] rounded-lg p-4 bg-white">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-bold text-black">{lang.language}</h4>
                        <div className="flex items-center gap-2 mt-1">
                          <span className={`px-3 py-1 text-xs font-medium rounded-full ${
                            lang.proficiency === 'native' ? 'bg-[#4ade80] text-white' :
                            lang.proficiency === 'fluent' ? 'bg-[#c8ffd2] text-black' :
                            lang.proficiency === 'advanced' ? 'bg-[#c8ffd2] text-black' :
                            lang.proficiency === 'intermediate' ? 'bg-[#c8ffd2] text-black' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {proficiencyLevels.find(p => p.value === lang.proficiency)?.label || lang.proficiency}
                          </span>
                        </div>
                      </div>
                      <button
                        onClick={() => removeLanguage(index)}
                        className="text-red-700 hover:text-red-800 transition-colors"
                        title="Delete"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* ÂÖ¥Ë∂£Áà±Â•Ω */}
      <div className="bg-white border-2 border-[#c8ffd2] rounded-lg p-8 shadow-sm transition-opacity">
        <h3 className="text-xl font-bold text-black mb-6 flex items-center gap-3">
          <div className="w-16 h-16 bg-[#c8ffd2] rounded-full flex items-center justify-center">
            <span className="text-2xl">üéØ</span>
          </div>
          Interests & Hobbies
        </h3>
        
        <div className="bg-white rounded-lg p-6">
          <label className="block text-sm font-medium text-gray-800 mb-2">
            Personal Interests
          </label>
          <textarea
            value={data.interests || ''}
            onChange={(e) => updateTextField('interests', e.target.value)}
            rows={4}
            className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-lg focus:outline-none focus:ring-2 focus:ring-black resize-vertical text-sm"
            placeholder="Share your hobbies, interests, volunteer work, or other activities that showcase your personality and values..."
          />
          <p className="text-xs text-gray-600 mt-1">
            {(data.interests || '').length}/500 characters
          </p>
        </div>
      </div>

      {/* Êé®Ëçê‰∫∫‰ø°ÊÅØ */}
      <div className="bg-white border-2 border-[#c8ffd2] rounded-lg p-8 shadow-sm transition-opacity">
        <h3 className="text-xl font-bold text-black mb-6 flex items-center gap-3">
          <div className="w-16 h-16 bg-[#c8ffd2] rounded-full flex items-center justify-center">
            <span className="text-2xl">üë•</span>
          </div>
          References
        </h3>
        
        <div className="bg-white rounded-lg p-6">
          <label className="block text-sm font-medium text-gray-800 mb-2">
            Reference Contacts
          </label>
          <textarea
            value={data.reference_contacts || ''}
            onChange={(e) => updateTextField('reference_contacts', e.target.value)}
            rows={4}
            className="w-full px-4 py-2 bg-[#c8ffd2] border-0 rounded-lg focus:outline-none focus:ring-2 focus:ring-black resize-vertical text-sm"
            placeholder="You can list reference contacts here, or simply state 'Available upon request'..."
          />
          <p className="text-xs text-gray-600 mt-1">
            Tip: It's often better to state "References available upon request" and provide them when asked.
          </p>
        </div>
      </div>

      {/* ÂÆåÊàêÂ∫¶ÂíåÊèêÁ§∫ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* ÁªüËÆ°‰ø°ÊÅØ */}
        <div className="bg-white border-2 border-[#c8ffd2] rounded-lg p-6 shadow-sm">
          <h4 className="font-bold text-black mb-4">Section Summary</h4>
          <div className="space-y-3 text-sm">
            <div className="flex justify-between">
              <span className="text-gray-800">Certifications:</span>
              <span className="font-bold text-black">{certifications.length}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-800">Languages:</span>
              <span className="font-bold text-black">{languages.length}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-800">Interests:</span>
              <span className="font-bold text-black">{data.interests ? 'Added' : 'Not added'}</span>
            </div>
            <div className="flex justify-between">
              <span className="text-gray-800">References:</span>
              <span className="font-bold text-black">{data.reference_contacts ? 'Added' : 'Not added'}</span>
            </div>
          </div>
        </div>

        {/* ÊèêÁ§∫‰ø°ÊÅØ */}
        <div className="bg-white border-2 border-[#c8ffd2] rounded-lg p-6 shadow-sm">
          <div className="flex items-start gap-4">
            <div className="w-12 h-12 bg-[#c8ffd2] rounded-full flex items-center justify-center flex-shrink-0">
              <span className="text-xl">üí°</span>
            </div>
            <div>
              <h4 className="text-black font-bold mb-2">Additional Info Tips</h4>
              <ul className="text-gray-800 text-sm space-y-1">
                <li>‚Ä¢ Include relevant certifications and licenses</li>
                <li>‚Ä¢ List languages if relevant to your target role</li>
                <li>‚Ä¢ Share interests that show leadership or teamwork</li>
                <li>‚Ä¢ Keep references ready but don't include contact details</li>
                <li>‚Ä¢ Only add information that strengthens your profile</li>
              </ul>
            </div>
          </div>
        </div>
      </div>

      {/* ÂÆåÊàêÊèêÁ§∫ */}
      {certifications.length > 0 || languages.length > 0 || data.interests || data.reference_contacts ? (
        <div className="bg-[#4ade80] rounded-lg p-6">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center">
              <span className="text-xl">üéâ</span>
            </div>
            <div>
              <h4 className="text-white font-bold">Great Job!</h4>
              <p className="text-white text-sm mt-1">
                You've added additional information that will help your resume stand out. 
                Don't forget to save your changes!
              </p>
            </div>
          </div>
        </div>
      ) : (
        <div className="text-center py-12 border-2 border-dashed border-[#c8ffd2] rounded-lg">
          <div className="w-20 h-20 bg-[#c8ffd2] rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-4xl">üìã</span>
          </div>
          <h3 className="text-lg font-bold text-black mb-2">Additional Information</h3>
          <p className="text-gray-600 text-sm">
            Add certifications, languages, and other relevant information to strengthen your resume
          </p>
        </div>
      )}
    </div>
  );
}