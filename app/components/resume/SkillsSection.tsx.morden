'use client';

import { useState } from 'react';
import { ResumeDetail } from '@/lib/types/resume';

interface Skill {
  category: string;
  items: string[];
}

interface SkillsSectionProps {
  data: ResumeDetail;
  onChange: (field: keyof ResumeDetail, value: any) => void;
}

export default function SkillsSection({ data, onChange }: SkillsSectionProps) {
  const [newSkillCategory, setNewSkillCategory] = useState('');
  const [newSkillItem, setNewSkillItem] = useState('');
  const [activeCategory, setActiveCategory] = useState<string>('');

  // 预定义的技能分类
  const skillCategories = [
    'Programming Languages',
    'Web Technologies',
    'Frameworks & Libraries',
    'Databases',
    'Tools & Software',
    'Cloud Platforms',
    'Soft Skills',
    'Languages',
    'Other'
  ];

  const skills: Skill[] = (data.skills as Skill[]) || [];

  // 添加新的技能分类
  const addSkillCategory = () => {
    if (!newSkillCategory.trim()) return;

    const existingCategory = skills.find(s => s.category.toLowerCase() === newSkillCategory.toLowerCase());
    if (existingCategory) {
      alert('This skill category already exists!');
      return;
    }

    const newSkill: Skill = {
      category: newSkillCategory.trim(),
      items: []
    };

    const updatedSkills = [...skills, newSkill];
    onChange('skills', updatedSkills);
    setNewSkillCategory('');
    setActiveCategory(newSkill.category);
  };

  // 添加技能项目到指定分类
  const addSkillItem = (categoryIndex: number) => {
    if (!newSkillItem.trim()) return;

    const updatedSkills = [...skills];
    const category = updatedSkills[categoryIndex];
    
    if (category.items.includes(newSkillItem.trim())) {
      alert('This skill already exists in this category!');
      return;
    }

    category.items.push(newSkillItem.trim());
    onChange('skills', updatedSkills);
    setNewSkillItem('');
  };

  // 删除技能项目
  const removeSkillItem = (categoryIndex: number, itemIndex: number) => {
    const updatedSkills = [...skills];
    updatedSkills[categoryIndex].items.splice(itemIndex, 1);
    onChange('skills', updatedSkills);
  };

  // 删除技能分类
  const removeSkillCategory = (categoryIndex: number) => {
    if (confirm('Are you sure you want to delete this skill category and all its items?')) {
      const updatedSkills = [...skills];
      updatedSkills.splice(categoryIndex, 1);
      onChange('skills', updatedSkills);
      setActiveCategory('');
    }
  };

  // 使用预定义分类
  const addPredefinedCategory = (category: string) => {
    const existingCategory = skills.find(s => s.category.toLowerCase() === category.toLowerCase());
    if (existingCategory) {
      setActiveCategory(category);
      return;
    }

    const newSkill: Skill = {
      category: category,
      items: []
    };

    const updatedSkills = [...skills, newSkill];
    onChange('skills', updatedSkills);
    setActiveCategory(category);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-indigo-50">
      <div className="max-w-6xl mx-auto p-8 space-y-8">
        {/* 现代化标题区域 */}
        <div className="relative">
          <div className="absolute inset-0 bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-3xl blur-3xl"></div>
          <div className="relative bg-white/80 backdrop-blur-sm border border-white/50 rounded-3xl p-8 shadow-xl">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-900 via-slate-700 to-indigo-600 bg-clip-text text-transparent">
                  Skills Portfolio
                </h1>
                <p className="text-slate-600 text-lg mt-2">
                  Organize and showcase your technical expertise with style
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-6 text-sm text-slate-500">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <span>Live Editor</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <span>Real-time Preview</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                <span>Auto-save Enabled</span>
              </div>
            </div>
          </div>
        </div>

        {/* 快速添加区域 - 现代卡片设计 */}
        <div className="bg-white/70 backdrop-blur-sm border border-indigo-100 rounded-2xl p-6 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Quick Categories</h2>
          </div>
          
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
            {skillCategories.map((category) => {
              const isAdded = skills.some(s => s.category === category);
              return (
                <button
                  key={category}
                  onClick={() => addPredefinedCategory(category)}
                  className={`group relative overflow-hidden px-4 py-3 rounded-xl text-sm font-medium transition-all duration-300 transform hover:scale-105 ${
                    isAdded
                      ? 'bg-gradient-to-r from-emerald-500 to-green-600 text-white shadow-lg'
                      : 'bg-gradient-to-r from-slate-100 to-slate-200 text-slate-700 hover:from-indigo-500 hover:to-purple-600 hover:text-white shadow-md hover:shadow-lg'
                  }`}
                >
                  <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <span className="relative">{category}</span>
                  {isAdded && (
                    <div className="absolute top-1 right-1">
                      <div className="w-2 h-2 bg-white rounded-full"></div>
                    </div>
                  )}
                </button>
              );
            })}
          </div>
        </div>

        {/* 自定义分类添加区域 */}
        <div className="bg-white/70 backdrop-blur-sm border border-purple-100 rounded-2xl p-6 shadow-lg">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Custom Category</h2>
          </div>
          
          <div className="flex gap-4">
            <input
              type="text"
              value={newSkillCategory}
              onChange={(e) => setNewSkillCategory(e.target.value)}
              placeholder="e.g., Design Tools, Marketing Skills..."
              className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-all duration-300 text-slate-700 placeholder-slate-400"
              onKeyPress={(e) => e.key === 'Enter' && addSkillCategory()}
            />
            <button
              onClick={addSkillCategory}
              className="bg-gradient-to-r from-purple-500 to-pink-600 text-white px-6 py-3 rounded-xl font-medium hover:from-purple-600 hover:to-pink-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              Create Category
            </button>
          </div>
        </div>

        {/* 技能分类展示区域 */}
        <div className="space-y-6">
          {skills.length === 0 ? (
            <div className="text-center py-16 bg-white/50 backdrop-blur-sm border-2 border-dashed border-slate-300 rounded-3xl">
              <div className="w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg className="w-12 h-12 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-slate-600 mb-2">Ready to Showcase Your Skills?</h3>
              <p className="text-slate-500 text-lg">Start by selecting or creating your first skill category above</p>
            </div>
          ) : (
            <div className="grid gap-6">
              {skills.map((skillCategory, categoryIndex) => (
                <div key={categoryIndex} className="group bg-white/70 backdrop-blur-sm border border-slate-200 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300">
                  {/* 分类标题区域 */}
                  <div className="flex items-center justify-between p-6 border-b border-slate-100">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center shadow-md">
                        <span className="text-white font-bold text-lg">
                          {skillCategory.category.charAt(0)}
                        </span>
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-slate-800">{skillCategory.category}</h3>
                        <p className="text-slate-500">
                          {skillCategory.items.length} skill{skillCategory.items.length !== 1 ? 's' : ''} added
                        </p>
                      </div>
                    </div>
                    <button
                      onClick={() => removeSkillCategory(categoryIndex)}
                      className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all duration-300"
                      title="Delete category"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>

                  {/* 技能标签展示 */}
                  <div className="p-6">
                    {skillCategory.items.length === 0 ? (
                      <p className="text-slate-400 text-center py-8 italic">No skills added to this category yet</p>
                    ) : (
                      <div className="flex flex-wrap gap-3 mb-6">
                        {skillCategory.items.map((item, itemIndex) => (
                          <div
                            key={itemIndex}
                            className="group/item flex items-center gap-2 bg-gradient-to-r from-emerald-100 to-green-100 hover:from-emerald-200 hover:to-green-200 text-emerald-800 px-4 py-2 rounded-full font-medium transition-all duration-300 transform hover:scale-105 shadow-sm hover:shadow-md"
                          >
                            <span>{item}</span>
                            <button
                              onClick={() => removeSkillItem(categoryIndex, itemIndex)}
                              className="opacity-0 group-hover/item:opacity-100 text-emerald-600 hover:text-emerald-800 hover:bg-emerald-200 rounded-full p-1 transition-all duration-200"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* 添加技能输入框 */}
                    <div className="flex gap-3">
                      <input
                        type="text"
                        value={activeCategory === skillCategory.category ? newSkillItem : ''}
                        onChange={(e) => {
                          setNewSkillItem(e.target.value);
                          setActiveCategory(skillCategory.category);
                        }}
                        placeholder="Add a new skill..."
                        className="flex-1 px-4 py-3 bg-white/80 border border-slate-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 transition-all duration-300 text-slate-700 placeholder-slate-400"
                        onKeyPress={(e) => e.key === 'Enter' && addSkillItem(categoryIndex)}
                      />
                      <button
                        onClick={() => addSkillItem(categoryIndex)}
                        disabled={activeCategory !== skillCategory.category || !newSkillItem.trim()}
                        className="bg-gradient-to-r from-emerald-500 to-green-600 text-white px-6 py-3 rounded-xl font-medium hover:from-emerald-600 hover:to-green-700 disabled:from-slate-300 disabled:to-slate-400 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg disabled:transform-none disabled:shadow-none"
                      >
                        Add Skill
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* 专业建议区域 */}
        {skills.length > 0 && (
          <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-2xl p-6 shadow-lg">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-md">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div className="flex-1">
                <h4 className="text-xl font-bold text-amber-900 mb-3">Professional Tips</h4>
                <div className="grid md:grid-cols-2 gap-4 text-amber-800">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Target job-relevant skills</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Balance technical and soft skills</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Be specific (e.g., "React.js" vs "JavaScript")</span>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Prioritize important skills first</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Keep skills up to date</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Include proficiency levels</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* 统计信息仪表板 */}
        {skills.length > 0 && (
          <div className="bg-gradient-to-r from-slate-900 to-slate-800 text-white rounded-2xl p-6 shadow-xl">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-indigo-400 mb-1">
                  {skills.length}
                </div>
                <div className="text-slate-300">Categories</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-emerald-400 mb-1">
                  {skills.reduce((total, cat) => total + cat.items.length, 0)}
                </div>
                <div className="text-slate-300">Total Skills</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-400 mb-1">
                  {Math.round(skills.reduce((total, cat) => total + cat.items.length, 0) / skills.length)}
                </div>
                <div className="text-slate-300">Avg per Category</div>
              </div>
              <div className="text-center">
                <div className="flex items-center justify-center gap-2 text-amber-400">
                  <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  <span className="text-slate-300">Auto-saved</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}