'use client';

import { useState } from 'react';
import { ResumeDetail } from '@/lib/types/resume';

interface Education {
  school: string;
  degree: string;
  major: string;
  gpa?: string;
  start_date: string;
  end_date: string;
  description?: string;
  achievements?: string[];
}

interface EducationSectionProps {
  data: ResumeDetail;
  onChange: (field: keyof ResumeDetail, value: any) => void;
}

export default function EducationSection({ data, onChange }: EducationSectionProps) {
  const [editingIndex, setEditingIndex] = useState<number>(-1);
  const [newEducation, setNewEducation] = useState<Education>({
    school: '',
    degree: '',
    major: '',
    gpa: '',
    start_date: '',
    end_date: '',
    description: '',
    achievements: []
  });
  const [newAchievement, setNewAchievement] = useState('');

  const education: Education[] = (data.education as Education[]) || [];

  // Â≠¶‰ΩçÁ±ªÂûãÈÄâÈ°π
  const degreeTypes = [
    'High School Diploma',
    'Associate Degree',
    'Bachelor\'s Degree',
    'Master\'s Degree',
    'PhD',
    'Certificate',
    'Other'
  ];

  // Ëé∑ÂèñÂ≠¶‰ΩçÂõæÊ†á
  const getDegreeIcon = (degree: string) => {
    if (degree.includes('PhD')) return 'üéì';
    if (degree.includes('Master')) return 'üéñÔ∏è';
    if (degree.includes('Bachelor')) return 'üèÜ';
    if (degree.includes('Associate')) return 'üìú';
    if (degree.includes('High School')) return 'üè´';
    if (degree.includes('Certificate')) return 'üèÖ';
    return 'üìö';
  };

  // Ê∑ªÂä†Êñ∞ÊïôËÇ≤ÁªèÂéÜ
  const addEducation = () => {
    if (!newEducation.school.trim() || !newEducation.degree.trim()) {
      alert('Please fill in school name and degree.');
      return;
    }

    const updatedEducation = [...education, { ...newEducation }];
    onChange('education', updatedEducation);
    
    // ÈáçÁΩÆË°®Âçï
    setNewEducation({
      school: '',
      degree: '',
      major: '',
      gpa: '',
      start_date: '',
      end_date: '',
      description: '',
      achievements: []
    });
  };

  // Êõ¥Êñ∞ÊïôËÇ≤ÁªèÂéÜ
  const updateEducation = (index: number, field: keyof Education, value: any) => {
    const updatedEducation = [...education];
    updatedEducation[index] = { ...updatedEducation[index], [field]: value };
    onChange('education', updatedEducation);
  };

  // Âà†Èô§ÊïôËÇ≤ÁªèÂéÜ
  const removeEducation = (index: number) => {
    if (confirm('Are you sure you want to delete this education entry?')) {
      const updatedEducation = [...education];
      updatedEducation.splice(index, 1);
      onChange('education', updatedEducation);
      setEditingIndex(-1);
    }
  };

  // Ê∑ªÂä†ÊàêÂ∞±Âà∞ÊïôËÇ≤ÁªèÂéÜ
  const addAchievement = (index: number, achievement: string) => {
    if (!achievement.trim()) return;
    
    const updatedEducation = [...education];
    const achievements = updatedEducation[index].achievements || [];
    achievements.push(achievement.trim());
    updatedEducation[index].achievements = achievements;
    onChange('education', updatedEducation);
  };

  // Âà†Èô§ÊàêÂ∞±
  const removeAchievement = (eduIndex: number, achIndex: number) => {
    const updatedEducation = [...education];
    const achievements = updatedEducation[eduIndex].achievements || [];
    achievements.splice(achIndex, 1);
    updatedEducation[eduIndex].achievements = achievements;
    onChange('education', updatedEducation);
  };

  // Ê†ºÂºèÂåñÊó•Êúü
  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const date = new Date(dateStr + '-01');
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-purple-50">
      <div className="max-w-6xl mx-auto p-8 space-y-8">
        {/* Áé∞‰ª£ÂåñÊ†áÈ¢òÂå∫Âüü */}
        <div className="relative">
          <div className="absolute inset-0 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-3xl blur-3xl"></div>
          <div className="relative bg-white/80 backdrop-blur-sm border border-white/50 rounded-3xl p-8 shadow-xl">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l9-5-9-5-9 5 9 5z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                </svg>
              </div>
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-900 via-slate-700 to-purple-600 bg-clip-text text-transparent">
                  Educational Journey
                </h1>
                <p className="text-slate-600 text-lg mt-2">
                  Showcase your academic achievements and learning milestones
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-6 text-sm text-slate-500">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <span>Smart Formatting</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                <span>Achievement Tracking</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <span>Timeline View</span>
              </div>
            </div>
          </div>
        </div>

        {/* Ê∑ªÂä†ÊïôËÇ≤ÁªèÂéÜË°®Âçï */}
        <div className="bg-white/70 backdrop-blur-sm border border-purple-100 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-8">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Add New Education</h2>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            {/* Â≠¶Ê†°ÂêçÁß∞ */}
            <div className="md:col-span-2">
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
                School/Institution
                <span className="text-red-500 ml-1">*</span>
              </label>
              <input
                type="text"
                value={newEducation.school}
                onChange={(e) => setNewEducation({...newEducation, school: e.target.value})}
                className="w-full bg-gradient-to-r from-purple-50 to-pink-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                placeholder="e.g., Harvard University, MIT"
              />
            </div>

            {/* Â≠¶‰Ωç */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                </svg>
                Degree Type
                <span className="text-red-500 ml-1">*</span>
              </label>
              <select
                value={newEducation.degree}
                onChange={(e) => setNewEducation({...newEducation, degree: e.target.value})}
                className="w-full bg-gradient-to-r from-indigo-50 to-purple-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
              >
                <option value="">Select degree type</option>
                {degreeTypes.map((degree) => (
                  <option key={degree} value={degree}>{degree}</option>
                ))}
              </select>
            </div>

            {/* ‰∏ì‰∏ö */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                </svg>
                Major/Field of Study
              </label>
              <input
                type="text"
                value={newEducation.major}
                onChange={(e) => setNewEducation({...newEducation, major: e.target.value})}
                className="w-full bg-gradient-to-r from-blue-50 to-indigo-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                placeholder="e.g., Computer Science, Business Administration"
              />
            </div>

            {/* GPA */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                </svg>
                GPA (Optional)
              </label>
              <input
                type="text"
                value={newEducation.gpa}
                onChange={(e) => setNewEducation({...newEducation, gpa: e.target.value})}
                className="w-full bg-gradient-to-r from-emerald-50 to-green-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                placeholder="e.g., 3.8/4.0, 3.8"
              />
            </div>

            {/* ÂºÄÂßãÊó•Êúü */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Start Date
              </label>
              <input
                type="month"
                value={newEducation.start_date}
                onChange={(e) => setNewEducation({...newEducation, start_date: e.target.value})}
                className="w-full bg-gradient-to-r from-amber-50 to-orange-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
              />
            </div>

            {/* ÁªìÊùüÊó•Êúü */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                End Date
              </label>
              <input
                type="month"
                value={newEducation.end_date}
                onChange={(e) => setNewEducation({...newEducation, end_date: e.target.value})}
                className="w-full bg-gradient-to-r from-red-50 to-pink-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
              />
            </div>

            {/* ÊèèËø∞ */}
            <div className="md:col-span-2">
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16m-7 6h7" />
                </svg>
                Description (Optional)
              </label>
              <textarea
                value={newEducation.description}
                onChange={(e) => setNewEducation({...newEducation, description: e.target.value})}
                rows={3}
                className="w-full bg-gradient-to-r from-slate-50 to-gray-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-500 focus:bg-white transition-all duration-300 resize-vertical shadow-sm hover:shadow-md"
                placeholder="Relevant coursework, thesis, or additional details..."
              />
            </div>
          </div>

          <button
            onClick={addEducation}
            className="bg-gradient-to-r from-purple-500 to-pink-600 text-white px-8 py-3 rounded-xl font-medium hover:from-purple-600 hover:to-pink-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
          >
            Add Education Entry
          </button>
        </div>

        {/* ÊïôËÇ≤ÁªèÂéÜÂ±ïÁ§∫Âå∫Âüü */}
        <div className="space-y-6">
          {education.length === 0 ? (
            <div className="text-center py-16 bg-white/50 backdrop-blur-sm border-2 border-dashed border-slate-300 rounded-3xl">
              <div className="w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg className="w-12 h-12 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l9-5-9-5-9 5 9 5z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-slate-600 mb-2">Start Building Your Academic Profile</h3>
              <p className="text-slate-500 text-lg">Add your educational background to showcase your learning journey</p>
            </div>
          ) : (
            <div className="space-y-6">
              {education.map((edu, index) => (
                <div key={index} className="group bg-white/70 backdrop-blur-sm border border-slate-200 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300">
                  {editingIndex === index ? (
                    // ÁºñËæëÊ®°Âºè
                    <div className="p-8">
                      <div className="flex items-center gap-3 mb-6">
                        <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
                          <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                          </svg>
                        </div>
                        <h3 className="text-xl font-bold text-slate-800">Edit Education</h3>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div className="md:col-span-2">
                          <label className="block text-sm font-semibold text-slate-700 mb-2">School</label>
                          <input
                            type="text"
                            value={edu.school}
                            onChange={(e) => updateEducation(index, 'school', e.target.value)}
                            className="w-full bg-gradient-to-r from-blue-50 to-indigo-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Degree</label>
                          <select
                            value={edu.degree}
                            onChange={(e) => updateEducation(index, 'degree', e.target.value)}
                            className="w-full bg-gradient-to-r from-purple-50 to-pink-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:bg-white transition-all duration-300"
                          >
                            {degreeTypes.map((degree) => (
                              <option key={degree} value={degree}>{degree}</option>
                            ))}
                          </select>
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Major</label>
                          <input
                            type="text"
                            value={edu.major}
                            onChange={(e) => updateEducation(index, 'major', e.target.value)}
                            className="w-full bg-gradient-to-r from-emerald-50 to-green-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                      </div>
                      
                      <div className="flex gap-4">
                        <button
                          onClick={() => setEditingIndex(-1)}
                          className="bg-gradient-to-r from-emerald-500 to-green-600 text-white px-6 py-3 rounded-xl font-medium hover:from-emerald-600 hover:to-green-700 transition-all duration-300 transform hover:scale-105"
                        >
                          Save Changes
                        </button>
                        <button
                          onClick={() => setEditingIndex(-1)}
                          className="bg-gradient-to-r from-slate-500 to-gray-600 text-white px-6 py-3 rounded-xl font-medium hover:from-slate-600 hover:to-gray-700 transition-all duration-300 transform hover:scale-105"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  ) : (
                    // ÊòæÁ§∫Ê®°Âºè
                    <div className="p-8">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-start gap-4 flex-1">
                          <div className="w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center text-2xl shadow-lg">
                            {getDegreeIcon(edu.degree)}
                          </div>
                          <div className="flex-1">
                            <h3 className="text-xl font-bold text-slate-800 mb-1">
                              {edu.degree} {edu.major && `in ${edu.major}`}
                            </h3>
                            <p className="text-lg font-medium text-slate-600 mb-2">{edu.school}</p>
                            <div className="flex items-center flex-wrap gap-4 text-sm">
                              {edu.start_date && edu.end_date && (
                                <div className="flex items-center gap-2 bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                  </svg>
                                  {formatDate(edu.start_date)} - {formatDate(edu.end_date)}
                                </div>
                              )}
                              {edu.gpa && (
                                <div className="flex items-center gap-2 bg-emerald-100 text-emerald-800 px-3 py-1 rounded-full font-medium">
                                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                  </svg>
                                  GPA: {edu.gpa}
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300">
                          <button
                            onClick={() => setEditingIndex(index)}
                            className="text-blue-500 hover:text-blue-700 hover:bg-blue-50 p-2 rounded-lg transition-all duration-200"
                            title="Edit"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                          <button
                            onClick={() => removeEducation(index)}
                            className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all duration-200"
                            title="Delete"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </div>

                      {edu.description && (
                        <div className="mb-6 p-4 bg-slate-50 rounded-xl">
                          <p className="text-slate-600 leading-relaxed">{edu.description}</p>
                        </div>
                      )}

                      {/* ÊàêÂ∞±Â±ïÁ§∫ */}
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <h4 className="text-lg font-semibold text-slate-700 flex items-center gap-2">
                            <svg className="w-5 h-5 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                            Achievements & Highlights
                          </h4>
                        </div>

                        {edu.achievements && edu.achievements.length > 0 && (
                          <div className="grid gap-3">
                            {edu.achievements.map((achievement, achIndex) => (
                              <div key={achIndex} className="group/achievement flex items-start gap-3 p-3 bg-gradient-to-r from-emerald-50 to-green-50 hover:from-emerald-100 hover:to-green-100 rounded-xl transition-all duration-300">
                                <div className="w-2 h-2 bg-emerald-500 rounded-full mt-2 flex-shrink-0"></div>
                                <span className="flex-1 text-slate-700">{achievement}</span>
                                <button
                                  onClick={() => removeAchievement(index, achIndex)}
                                  className="opacity-0 group-hover/achievement:opacity-100 text-red-500 hover:text-red-700 hover:bg-red-100 p-1 rounded transition-all duration-200"
                                  title="Remove achievement"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                  </svg>
                                </button>
                              </div>
                            ))}
                          </div>
                        )}

                        {/* Ê∑ªÂä†ÊàêÂ∞± */}
                        <div className="flex gap-3">
                          <input
                            type="text"
                            value={newAchievement}
                            onChange={(e) => setNewAchievement(e.target.value)}
                            className="flex-1 bg-white border-0 rounded-xl px-4 py-2 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 transition-all duration-300 shadow-sm hover:shadow-md"
                            placeholder="Add an achievement or highlight..."
                            onKeyPress={(e) => {
                              if (e.key === 'Enter') {
                                addAchievement(index, newAchievement);
                                setNewAchievement('');
                              }
                            }}
                          />
                          <button
                            onClick={() => {
                              addAchievement(index, newAchievement);
                              setNewAchievement('');
                            }}
                            disabled={!newAchievement.trim()}
                            className="bg-gradient-to-r from-emerald-500 to-green-600 text-white px-4 py-2 rounded-xl font-medium hover:from-emerald-600 hover:to-green-700 disabled:from-slate-300 disabled:to-slate-400 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 disabled:transform-none"
                          >
                            Add
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* ‰∏ì‰∏öÂª∫ËÆÆÂç°Áâá */}
        {education.length > 0 && (
          <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-2xl p-6 shadow-lg">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-md">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div className="flex-1">
                <h4 className="text-xl font-bold text-amber-900 mb-3">Academic Excellence Tips</h4>
                <div className="grid md:grid-cols-2 gap-4 text-amber-800">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>List education in reverse chronological order</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Include GPA only if 3.5 or higher</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Mention relevant coursework for entry-level positions</span>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Include academic honors and scholarships</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Highlight thesis or major projects</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Add leadership roles and activities</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* ÁªüËÆ°‰ª™Ë°®Êùø */}
        {education.length > 0 && (
          <div className="bg-gradient-to-r from-slate-900 to-slate-800 text-white rounded-2xl p-6 shadow-xl">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-400 mb-1">
                  {education.length}
                </div>
                <div className="text-slate-300">Education Entries</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-emerald-400 mb-1">
                  {education.reduce((total, edu) => total + (edu.achievements?.length || 0), 0)}
                </div>
                <div className="text-slate-300">Total Achievements</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-400 mb-1">
                  {education.filter(edu => edu.gpa).length}
                </div>
                <div className="text-slate-300">With GPA</div>
              </div>
              <div className="text-center">
                <div className="flex items-center justify-center gap-2 text-amber-400">
                  <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  <span className="text-slate-300">Profile Updated</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}