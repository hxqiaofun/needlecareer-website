'use client';

import { useState } from 'react';
import { ResumeDetail } from '@/lib/types/resume';

interface Project {
  name: string;
  role: string;
  start_date: string;
  end_date: string;
  description: string;
  technologies: string[];
  url?: string;
  github_url?: string;
  highlights?: string[];
}

interface ProjectsSectionProps {
  data: ResumeDetail;
  onChange: (field: keyof ResumeDetail, value: any) => void;
}

export default function ProjectsSection({ data, onChange }: ProjectsSectionProps) {
  const [editingIndex, setEditingIndex] = useState<number>(-1);
  const [newProject, setNewProject] = useState<Project>({
    name: '',
    role: '',
    start_date: '',
    end_date: '',
    description: '',
    technologies: [],
    url: '',
    github_url: '',
    highlights: []
  });
  const [newTechnology, setNewTechnology] = useState('');
  const [newHighlight, setNewHighlight] = useState('');

  const projects: Project[] = (data.projects as Project[]) || [];

  // Â∏∏Áî®ÊäÄÊúØÊ†àÈÄâÈ°π
  const commonTechnologies = [
    'JavaScript', 'TypeScript', 'React', 'Next.js', 'Vue.js', 'Angular',
    'Node.js', 'Express', 'Python', 'Django', 'Flask', 'Java', 'Spring',
    'C#', '.NET', 'PHP', 'Laravel', 'Ruby', 'Rails', 'Go', 'Rust',
    'HTML', 'CSS', 'Tailwind CSS', 'Bootstrap', 'Sass', 'MongoDB',
    'PostgreSQL', 'MySQL', 'Redis', 'Docker', 'Kubernetes', 'AWS',
    'Azure', 'Google Cloud', 'Firebase', 'Supabase', 'GraphQL', 'REST API'
  ];

  // Ëé∑ÂèñÈ°πÁõÆÁ±ªÂûãÂõæÊ†á
  const getProjectIcon = (name: string, technologies: string[]) => {
    const nameLower = name.toLowerCase();
    const techString = technologies.join(' ').toLowerCase();
    
    if (nameLower.includes('mobile') || nameLower.includes('app') || techString.includes('react native') || techString.includes('flutter')) return 'üì±';
    if (nameLower.includes('web') || techString.includes('react') || techString.includes('vue') || techString.includes('angular')) return 'üåê';
    if (nameLower.includes('ai') || nameLower.includes('ml') || nameLower.includes('machine learning')) return 'ü§ñ';
    if (nameLower.includes('game') || nameLower.includes('unity')) return 'üéÆ';
    if (nameLower.includes('api') || techString.includes('express') || techString.includes('node')) return '‚ö°';
    if (nameLower.includes('data') || techString.includes('python') || techString.includes('sql')) return 'üìä';
    if (nameLower.includes('ecommerce') || nameLower.includes('shop')) return 'üõí';
    return 'üöÄ';
  };

  // Ê∑ªÂä†Êñ∞È°πÁõÆ
  const addProject = () => {
    if (!newProject.name.trim() || !newProject.role.trim()) {
      alert('Please fill in project name and your role.');
      return;
    }

    const updatedProjects = [...projects, { ...newProject }];
    onChange('projects', updatedProjects);
    
    // ÈáçÁΩÆË°®Âçï
    setNewProject({
      name: '',
      role: '',
      start_date: '',
      end_date: '',
      description: '',
      technologies: [],
      url: '',
      github_url: '',
      highlights: []
    });
    setNewTechnology('');
    setNewHighlight('');
  };

  // Êõ¥Êñ∞È°πÁõÆ
  const updateProject = (index: number, field: keyof Project, value: any) => {
    const updatedProjects = [...projects];
    updatedProjects[index] = { ...updatedProjects[index], [field]: value };
    onChange('projects', updatedProjects);
  };

  // Âà†Èô§È°πÁõÆ
  const removeProject = (index: number) => {
    if (confirm('Are you sure you want to delete this project?')) {
      const updatedProjects = [...projects];
      updatedProjects.splice(index, 1);
      onChange('projects', updatedProjects);
      setEditingIndex(-1);
    }
  };

  // Ê∑ªÂä†ÊäÄÊúØÂà∞Êñ∞È°πÁõÆ
  const addTechnologyToNew = (technology: string) => {
    if (!technology.trim()) return;
    if (newProject.technologies.includes(technology.trim())) return;
    
    setNewProject({
      ...newProject,
      technologies: [...newProject.technologies, technology.trim()]
    });
    setNewTechnology('');
  };

  // Âà†Èô§Êñ∞È°πÁõÆÁöÑÊäÄÊúØ
  const removeTechnologyFromNew = (techIndex: number) => {
    const technologies = [...newProject.technologies];
    technologies.splice(techIndex, 1);
    setNewProject({ ...newProject, technologies });
  };

  // Ê∑ªÂä†‰∫ÆÁÇπÂà∞Êñ∞È°πÁõÆ
  const addHighlightToNew = () => {
    if (!newHighlight.trim()) return;
    
    setNewProject({
      ...newProject,
      highlights: [...(newProject.highlights || []), newHighlight.trim()]
    });
    setNewHighlight('');
  };

  // Âà†Èô§Êñ∞È°πÁõÆÁöÑ‰∫ÆÁÇπ
  const removeHighlightFromNew = (highlightIndex: number) => {
    const highlights = [...(newProject.highlights || [])];
    highlights.splice(highlightIndex, 1);
    setNewProject({ ...newProject, highlights });
  };

  // Ê∑ªÂä†ÊäÄÊúØÂà∞Áé∞ÊúâÈ°πÁõÆ
  const addTechnologyToExisting = (projIndex: number, technology: string) => {
    if (!technology.trim()) return;
    
    const updatedProjects = [...projects];
    const technologies = updatedProjects[projIndex].technologies || [];
    if (technologies.includes(technology.trim())) return;
    
    technologies.push(technology.trim());
    updatedProjects[projIndex].technologies = technologies;
    onChange('projects', updatedProjects);
  };

  // Âà†Èô§Áé∞ÊúâÈ°πÁõÆÁöÑÊäÄÊúØ
  const removeTechnologyFromExisting = (projIndex: number, techIndex: number) => {
    const updatedProjects = [...projects];
    const technologies = updatedProjects[projIndex].technologies || [];
    technologies.splice(techIndex, 1);
    updatedProjects[projIndex].technologies = technologies;
    onChange('projects', updatedProjects);
  };

  // Ê†ºÂºèÂåñÊó•Êúü
  const formatDate = (dateStr: string) => {
    if (!dateStr) return '';
    const date = new Date(dateStr + '-01');
    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-indigo-50">
      <div className="max-w-6xl mx-auto p-8 space-y-8">
        {/* Áé∞‰ª£ÂåñÊ†áÈ¢òÂå∫Âüü */}
        <div className="relative">
          <div className="absolute inset-0 bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-3xl blur-3xl"></div>
          <div className="relative bg-white/80 backdrop-blur-sm border border-white/50 rounded-3xl p-8 shadow-xl">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                </svg>
              </div>
              <div>
                <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-900 via-slate-700 to-indigo-600 bg-clip-text text-transparent">
                  Project Portfolio
                </h1>
                <p className="text-slate-600 text-lg mt-2">
                  Showcase your innovative projects and technical achievements
                </p>
              </div>
            </div>
            
            <div className="flex items-center gap-6 text-sm text-slate-500">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                <span>Tech Stack Tracking</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-indigo-400 rounded-full"></div>
                <span>Live Demo Links</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                <span>Impact Highlights</span>
              </div>
            </div>
          </div>
        </div>

        {/* Ê∑ªÂä†È°πÁõÆË°®Âçï */}
        <div className="bg-white/70 backdrop-blur-sm border border-indigo-100 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300">
          <div className="flex items-center gap-3 mb-8">
            <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
              <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-slate-800">Add New Project</h2>
          </div>
          
          <div className="space-y-6">
            {/* È°πÁõÆÂêçÁß∞ÂíåËßíËâ≤ */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                  </svg>
                  Project Name
                  <span className="text-red-500 ml-1">*</span>
                </label>
                <input
                  type="text"
                  value={newProject.name}
                  onChange={(e) => setNewProject({...newProject, name: e.target.value})}
                  className="w-full bg-gradient-to-r from-indigo-50 to-purple-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="e.g., E-commerce Platform, Mobile App"
                />
              </div>

              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  Your Role
                  <span className="text-red-500 ml-1">*</span>
                </label>
                <input
                  type="text"
                  value={newProject.role}
                  onChange={(e) => setNewProject({...newProject, role: e.target.value})}
                  className="w-full bg-gradient-to-r from-blue-50 to-indigo-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="e.g., Full-Stack Developer, Lead Designer"
                />
              </div>
            </div>

            {/* Êó•Êúü */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Start Date
                </label>
                <input
                  type="month"
                  value={newProject.start_date}
                  onChange={(e) => setNewProject({...newProject, start_date: e.target.value})}
                  className="w-full bg-gradient-to-r from-emerald-50 to-green-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                />
              </div>

              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  End Date
                </label>
                <input
                  type="month"
                  value={newProject.end_date}
                  onChange={(e) => setNewProject({...newProject, end_date: e.target.value})}
                  className="w-full bg-gradient-to-r from-red-50 to-pink-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                />
              </div>
            </div>

            {/* ÈìæÊé• */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-teal-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                  Project URL (Optional)
                </label>
                <input
                  type="url"
                  value={newProject.url}
                  onChange={(e) => setNewProject({...newProject, url: e.target.value})}
                  className="w-full bg-gradient-to-r from-teal-50 to-cyan-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="https://your-project.com"
                />
              </div>

              <div>
                <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                  <svg className="w-4 h-4 text-gray-700" fill="currentColor" viewBox="0 0 24 24">
                    <path fillRule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clipRule="evenodd" />
                  </svg>
                  GitHub URL (Optional)
                </label>
                <input
                  type="url"
                  value={newProject.github_url}
                  onChange={(e) => setNewProject({...newProject, github_url: e.target.value})}
                  className="w-full bg-gradient-to-r from-gray-50 to-slate-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:bg-white transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="https://github.com/username/project"
                />
              </div>
            </div>

            {/* È°πÁõÆÊèèËø∞ */}
            <div>
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700 mb-3">
                <svg className="w-4 h-4 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Project Description
              </label>
              <textarea
                value={newProject.description}
                onChange={(e) => setNewProject({...newProject, description: e.target.value})}
                rows={4}
                className="w-full bg-gradient-to-r from-purple-50 to-violet-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:bg-white transition-all duration-300 resize-vertical shadow-sm hover:shadow-md"
                placeholder="Describe what the project does, its purpose, and your contributions..."
              />
            </div>

            {/* ÊäÄÊúØÊ†àÁÆ°ÁêÜ */}
            <div className="space-y-4">
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700">
                <svg className="w-4 h-4 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                </svg>
                Technologies Used
              </label>
              
              {/* ÊäÄÊúØËæìÂÖ• */}
              <div className="flex gap-3">
                <input
                  type="text"
                  value={newTechnology}
                  onChange={(e) => setNewTechnology(e.target.value)}
                  className="flex-1 bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-amber-500 transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="Add a technology..."
                  onKeyPress={(e) => e.key === 'Enter' && addTechnologyToNew(newTechnology)}
                />
                <button
                  onClick={() => addTechnologyToNew(newTechnology)}
                  className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-6 py-3 rounded-xl font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg"
                >
                  Add
                </button>
              </div>

              {/* Âø´ÈÄüÊ∑ªÂä†Â∏∏Áî®ÊäÄÊúØ */}
              <div className="bg-slate-50 rounded-xl p-4">
                <p className="text-xs text-slate-600 mb-3 font-medium">Quick Add Popular Technologies:</p>
                <div className="flex flex-wrap gap-2 max-h-32 overflow-y-auto">
                  {commonTechnologies.map((tech) => {
                    const isAdded = newProject.technologies.includes(tech);
                    return (
                      <button
                        key={tech}
                        onClick={() => addTechnologyToNew(tech)}
                        disabled={isAdded}
                        className={`px-3 py-1 text-xs rounded-full font-medium transition-all duration-200 transform hover:scale-105 ${
                          isAdded
                            ? 'bg-emerald-100 text-emerald-700 border-2 border-emerald-300 cursor-not-allowed'
                            : 'bg-white text-slate-700 border-2 border-slate-200 hover:border-blue-300 hover:bg-blue-50 shadow-sm hover:shadow-md'
                        }`}
                      >
                        {tech}
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* Â∑≤Ê∑ªÂä†ÁöÑÊäÄÊúØ */}
              {newProject.technologies.length > 0 && (
                <div className="space-y-3">
                  <p className="text-sm font-medium text-slate-700">Selected Technologies:</p>
                  <div className="flex flex-wrap gap-3">
                    {newProject.technologies.map((tech, index) => (
                      <div key={index} className="group flex items-center gap-2 bg-gradient-to-r from-blue-100 to-indigo-100 hover:from-blue-200 hover:to-indigo-200 text-blue-800 px-4 py-2 rounded-full font-medium transition-all duration-300 shadow-sm hover:shadow-md">
                        <span>{tech}</span>
                        <button
                          onClick={() => removeTechnologyFromNew(index)}
                          className="opacity-0 group-hover:opacity-100 text-blue-600 hover:text-blue-800 hover:bg-blue-200 rounded-full p-1 transition-all duration-200"
                        >
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* È°πÁõÆ‰∫ÆÁÇπÁÆ°ÁêÜ */}
            <div className="space-y-4">
              <label className="flex items-center gap-2 text-sm font-semibold text-slate-700">
                <svg className="w-4 h-4 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                Key Highlights
              </label>
              
              <div className="flex gap-3">
                <input
                  type="text"
                  value={newHighlight}
                  onChange={(e) => setNewHighlight(e.target.value)}
                  className="flex-1 bg-white border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all duration-300 shadow-sm hover:shadow-md"
                  placeholder="Add a key feature or achievement..."
                  onKeyPress={(e) => e.key === 'Enter' && addHighlightToNew()}
                />
                <button
                  onClick={addHighlightToNew}
                  className="bg-gradient-to-r from-purple-500 to-pink-600 text-white px-6 py-3 rounded-xl font-medium hover:from-purple-600 hover:to-pink-700 transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg"
                >
                  Add
                </button>
              </div>

              {/* Â∑≤Ê∑ªÂä†ÁöÑ‰∫ÆÁÇπ */}
              {newProject.highlights && newProject.highlights.length > 0 && (
                <div className="space-y-3">
                  {newProject.highlights.map((highlight, index) => (
                    <div key={index} className="group flex items-start gap-3 p-3 bg-gradient-to-r from-purple-50 to-pink-50 hover:from-purple-100 hover:to-pink-100 rounded-xl transition-all duration-300">
                      <div className="w-2 h-2 bg-purple-500 rounded-full mt-2 flex-shrink-0"></div>
                      <span className="flex-1 text-slate-700">{highlight}</span>
                      <button
                        onClick={() => removeHighlightFromNew(index)}
                        className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 hover:bg-red-100 p-1 rounded transition-all duration-200"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          <div className="mt-8">
            <button
              onClick={addProject}
              className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white px-8 py-3 rounded-xl font-medium hover:from-indigo-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              Add Project Entry
            </button>
          </div>
        </div>

        {/* È°πÁõÆÂ±ïÁ§∫Âå∫Âüü */}
        <div className="space-y-6">
          {projects.length === 0 ? (
            <div className="text-center py-16 bg-white/50 backdrop-blur-sm border-2 border-dashed border-slate-300 rounded-3xl">
              <div className="w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 rounded-full flex items-center justify-center mx-auto mb-6">
                <svg className="w-12 h-12 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-slate-600 mb-2">Ready to Showcase Your Work?</h3>
              <p className="text-slate-500 text-lg">Add your projects to demonstrate your skills and creativity</p>
            </div>
          ) : (
            <div className="space-y-6">
              {projects.map((project, index) => (
                <div key={index} className="group bg-white/70 backdrop-blur-sm border border-slate-200 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300">
                  {editingIndex === index ? (
                    // ÁºñËæëÊ®°Âºè
                    <div className="p-8">
                      <div className="flex items-center gap-3 mb-6">
                        <div className="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
                          <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                          </svg>
                        </div>
                        <h3 className="text-xl font-bold text-slate-800">Edit Project</h3>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Project Name</label>
                          <input
                            type="text"
                            value={project.name}
                            onChange={(e) => updateProject(index, 'name', e.target.value)}
                            className="w-full bg-gradient-to-r from-indigo-50 to-purple-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Your Role</label>
                          <input
                            type="text"
                            value={project.role}
                            onChange={(e) => updateProject(index, 'role', e.target.value)}
                            className="w-full bg-gradient-to-r from-blue-50 to-indigo-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Start Date</label>
                          <input
                            type="month"
                            value={project.start_date}
                            onChange={(e) => updateProject(index, 'start_date', e.target.value)}
                            className="w-full bg-gradient-to-r from-emerald-50 to-green-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-semibold text-slate-700 mb-2">End Date</label>
                          <input
                            type="month"
                            value={project.end_date}
                            onChange={(e) => updateProject(index, 'end_date', e.target.value)}
                            className="w-full bg-gradient-to-r from-red-50 to-pink-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:bg-white transition-all duration-300"
                          />
                        </div>
                        <div className="md:col-span-2">
                          <label className="block text-sm font-semibold text-slate-700 mb-2">Description</label>
                          <textarea
                            value={project.description}
                            onChange={(e) => updateProject(index, 'description', e.target.value)}
                            rows={4}
                            className="w-full bg-gradient-to-r from-purple-50 to-violet-50 border-0 rounded-xl px-4 py-3 text-slate-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:bg-white transition-all duration-300 resize-vertical"
                          />
                        </div>
                      </div>
                      
                      <div className="flex gap-4">
                        <button
                          onClick={() => setEditingIndex(-1)}
                          className="bg-gradient-to-r from-emerald-500 to-green-600 text-white px-6 py-3 rounded-xl font-medium hover:from-emerald-600 hover:to-green-700 transition-all duration-300 transform hover:scale-105"
                        >
                          Save Changes
                        </button>
                        <button
                          onClick={() => setEditingIndex(-1)}
                          className="bg-gradient-to-r from-slate-500 to-gray-600 text-white px-6 py-3 rounded-xl font-medium hover:from-slate-600 hover:to-gray-700 transition-all duration-300 transform hover:scale-105"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  ) : (
                    // ÊòæÁ§∫Ê®°Âºè
                    <div className="p-8">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-start gap-4 flex-1">
                          <div className="w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center text-2xl shadow-lg">
                            {getProjectIcon(project.name, project.technologies)}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              <h3 className="text-xl font-bold text-slate-800">{project.name}</h3>
                              {project.url && (
                                <a
                                  href={project.url}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-teal-500 hover:text-teal-700 hover:bg-teal-50 p-2 rounded-lg transition-all duration-200"
                                  title="View Live Project"
                                >
                                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                  </svg>
                                </a>
                              )}
                              {project.github_url && (
                                <a
                                  href={project.github_url}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  className="text-gray-700 hover:text-gray-900 hover:bg-gray-100 p-2 rounded-lg transition-all duration-200"
                                  title="View Source Code"
                                >
                                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                    <path fillRule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clipRule="evenodd" />
                                  </svg>
                                </a>
                              )}
                            </div>
                            <p className="text-lg font-medium text-slate-600 mb-2">Role: {project.role}</p>
                            <div className="flex items-center gap-4 text-sm">
                              {project.start_date && project.end_date && (
                                <div className="flex items-center gap-2 bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                  </svg>
                                  {formatDate(project.start_date)} - {formatDate(project.end_date)}
                                </div>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex gap-2 opacity-0 group-hover:opacity-100 transition-all duration-300">
                          <button
                            onClick={() => setEditingIndex(index)}
                            className="text-blue-500 hover:text-blue-700 hover:bg-blue-50 p-2 rounded-lg transition-all duration-200"
                            title="Edit"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                          <button
                            onClick={() => removeProject(index)}
                            className="text-red-500 hover:text-red-700 hover:bg-red-50 p-2 rounded-lg transition-all duration-200"
                            title="Delete"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </div>

                      {project.description && (
                        <div className="mb-6 p-4 bg-slate-50 rounded-xl">
                          <p className="text-slate-600 leading-relaxed whitespace-pre-line">{project.description}</p>
                        </div>
                      )}

                      {/* ÊäÄÊúØÊ†àÂ±ïÁ§∫ */}
                      {project.technologies && project.technologies.length > 0 && (
                        <div className="mb-6">
                          <h4 className="text-lg font-semibold text-slate-700 mb-3 flex items-center gap-2">
                            <svg className="w-5 h-5 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
                            </svg>
                            Tech Stack
                          </h4>
                          <div className="flex flex-wrap gap-2">
                            {project.technologies.map((tech, techIndex) => (
                              <div key={techIndex} className="group/tech flex items-center gap-2 bg-gradient-to-r from-blue-100 to-indigo-100 hover:from-blue-200 hover:to-indigo-200 text-blue-800 px-3 py-2 rounded-full text-sm font-medium transition-all duration-300 shadow-sm hover:shadow-md">
                                <span>{tech}</span>
                                <button
                                  onClick={() => removeTechnologyFromExisting(index, techIndex)}
                                  className="opacity-0 group-hover/tech:opacity-100 text-blue-600 hover:text-blue-800 hover:bg-blue-200 rounded-full p-1 transition-all duration-200"
                                >
                                  <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                  </svg>
                                </button>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* È°πÁõÆ‰∫ÆÁÇπÂ±ïÁ§∫ */}
                      {project.highlights && project.highlights.length > 0 && (
                        <div className="space-y-4">
                          <h4 className="text-lg font-semibold text-slate-700 flex items-center gap-2">
                            <svg className="w-5 h-5 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
                              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                            Key Highlights
                          </h4>
                          <div className="grid gap-3">
                            {project.highlights.map((highlight, highlightIndex) => (
                              <div key={highlightIndex} className="flex items-start gap-3 p-3 bg-gradient-to-r from-amber-50 to-orange-50 hover:from-amber-100 hover:to-orange-100 rounded-xl transition-all duration-300">
                                <div className="w-2 h-2 bg-amber-500 rounded-full mt-2 flex-shrink-0"></div>
                                <span className="flex-1 text-slate-700">{highlight}</span>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>

        {/* ‰∏ì‰∏öÂª∫ËÆÆÂç°Áâá */}
        {projects.length > 0 && (
          <div className="bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-2xl p-6 shadow-lg">
            <div className="flex items-start gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-md">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
              </div>
              <div className="flex-1">
                <h4 className="text-xl font-bold text-amber-900 mb-3">Project Excellence Tips</h4>
                <div className="grid md:grid-cols-2 gap-4 text-amber-800">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Include both personal and professional projects</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Focus on projects that demonstrate relevant skills</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Provide live links and source code when possible</span>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Quantify the impact or scale of your projects</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Keep descriptions concise but informative</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-1.5 h-1.5 bg-amber-600 rounded-full"></div>
                      <span>Showcase diverse technical capabilities</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* ÁªüËÆ°‰ª™Ë°®Êùø */}
        {projects.length > 0 && (
          <div className="bg-gradient-to-r from-slate-900 to-slate-800 text-white rounded-2xl p-6 shadow-xl">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div className="text-center">
                <div className="text-3xl font-bold text-indigo-400 mb-1">
                  {projects.length}
                </div>
                <div className="text-slate-300">Total Projects</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-400 mb-1">
                  {projects.reduce((total, proj) => total + (proj.technologies?.length || 0), 0)}
                </div>
                <div className="text-slate-300">Technologies Used</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-purple-400 mb-1">
                  {projects.filter(proj => proj.url || proj.github_url).length}
                </div>
                <div className="text-slate-300">With Live Links</div>
              </div>
              <div className="text-center">
                <div className="flex items-center justify-center gap-2 text-amber-400">
                  <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  <span className="text-slate-300">Portfolio Ready</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}