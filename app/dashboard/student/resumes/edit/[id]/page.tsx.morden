'use client';

import { useState, useEffect, useRef } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { supabase } from '@/lib/supabase';
import Header from '@/app/components/Header';
import BasicInfoSection from '@/app/components/resume/BasicInfoSection';
import SkillsSection from '@/app/components/resume/SkillsSection';
import EducationSection from '@/app/components/resume/EducationSection';
import ExperienceSection from '@/app/components/resume/ExperienceSection';
import ProjectsSection from '@/app/components/resume/ProjectsSection';
import AdditionalInfoSection from '@/app/components/resume/AdditionalInfoSection';
import { Resume, ResumeDetail } from '@/lib/types/resume';

interface EditPageProps {}

export default function ResumeEditPage({}: EditPageProps) {
  const router = useRouter();
  const params = useParams();

  const resumeId = params.id as string;

  // 状态管理
  const [resume, setResume] = useState<Resume | null>(null);
  const [resumeDetail, setResumeDetail] = useState<ResumeDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [activeSection, setActiveSection] = useState('basic');
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [editingTitle, setEditingTitle] = useState(false);
  const [tempTitle, setTempTitle] = useState('');

  // 创建一个 ref 来防止重复创建
  const isCreatingRef = useRef(false);

  // 获取简历数据
  const fetchResumeData = async () => {
    try {
      setLoading(true);
      
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        console.log('No session found, redirecting to login');
        router.push('/login');
        return;
      }

      console.log('Current user ID:', session.user.id);
      console.log('Resume ID from URL:', resumeId);
      
      if (resumeId === 'new') {
        // 检查 ref 标志位，如果正在创建，则直接返回
        if (isCreatingRef.current) {
          return;
        }
        // 设置标志位，表示创建已开始
        isCreatingRef.current = true;
        
        console.log('Creating new resume...');
        await createNewResume(session.user.id);
        return;
      }

      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
      if (!uuidRegex.test(resumeId)) {
        console.error('Invalid resume ID format:', resumeId);
        alert('Invalid resume ID format. Please check the URL.');
        router.push('/dashboard/student/resumes');
        return;
      }
      
      const { data: resumeData, error: resumeError } = await supabase
        .from('resumes')
        .select('*')
        .eq('id', resumeId)
        .single();

      console.log('Resume query result:', { resumeData, resumeError });

      if (resumeError) {
        console.error('Error fetching resume:', resumeError);
        if (resumeError.code === 'PGRST116') {
          alert('Resume not found. Please check if the resume ID is correct.');
        } else {
          alert('Error loading resume: ' + resumeError.message);
        }
        router.push('/dashboard/student/resumes');
        return;
      }

      if (resumeData.student_id !== session.user.id) {
        console.error('Permission denied: Resume belongs to different user');
        alert('You do not have permission to edit this resume.');
        router.push('/dashboard/student/resumes');
        return;
      }

      setResume(resumeData);

      const { data: detailData, error: detailError } = await supabase
        .from('resume_details')
        .select('*')
        .eq('resume_id', resumeId)
        .single();

      console.log('Resume details query result:', { detailData, detailError });

      if (detailError && detailError.code !== 'PGRST116') {
        console.error('Error fetching resume details:', detailError);
      }

      if (!detailData) {
        console.log('Creating empty resume detail structure');
        const emptyDetail: Partial<ResumeDetail> = {
          resume_id: resumeId,
          full_name: '',
          email: session.user.email || '',
          phone: '',
          location: '',
          professional_summary: '',
          skills: [],
          education: [],
          experience: [],
          projects: [],
          certifications: [],
          languages: []
        };
        setResumeDetail(emptyDetail as ResumeDetail);
      } else {
        setResumeDetail(detailData);
      }

    } catch (error) {
      console.error('Error in fetchResumeData:', error);
      alert('An unexpected error occurred while loading the resume.');
      router.push('/dashboard/student/resumes');
    } finally {
      setLoading(false);
    }
  };

  // 创建新简历
  const createNewResume = async (userId: string) => {
    try {
      console.log('Creating new resume for user:', userId);
      
      const { data: newResume, error: createError } = await supabase
        .from('resumes')
        .insert({
          student_id: userId,
          title: 'Untitled Resume',
          status: 'draft',
          is_default: false
        })
        .select()
        .single();

      if (createError) {
        console.error('Error creating new resume:', createError);
        alert('Failed to create new resume: ' + createError.message);
        router.push('/dashboard/student/resumes');
        return;
      }

      console.log('New resume created:', newResume);
      
      router.replace(`/dashboard/student/resumes/edit/${newResume.id}`);
      
    } catch (error) {
      console.error('Error in createNewResume:', error);
      alert('An unexpected error occurred while creating the resume.');
      router.push('/dashboard/student/resumes');
    }
  };

  // 保存简历数据 (已修复)
  const saveResumeData = async (selectedStatus?: 'draft' | 'active') => {
    if (!resumeDetail || !resume) return;

    try {
      setSaving(true);

      // 关键改动：在 upsert 后添加 .select() 来获取刚保存或更新的数据。
      const { data: savedData, error: detailError } = await supabase
        .from('resume_details')
        .upsert({
          ...resumeDetail,
          updated_at: new Date().toISOString()
        })
        .select()
        .single();

      if (detailError) {
        console.error('Error saving resume details:', detailError);
        alert('Failed to save resume. Please try again.');
        return; // 在出错时提前返回
      }

      // 关键改动：使用从数据库返回的 `savedData` 来更新本地的 `resumeDetail` 状态。
      if (savedData) {
        setResumeDetail(savedData);
      }

      // 如果选择了新状态，更新简历状态
      if (selectedStatus && selectedStatus !== resume.status) {
        const { error: statusError } = await supabase
          .from('resumes')
          .update({ 
            status: selectedStatus,
            updated_at: new Date().toISOString()
          })
          .eq('id', resume.id);

        if (statusError) {
          console.error('Error updating resume status:', statusError);
          alert('Failed to update resume status. Please try again.');
          return;
        }

        // 更新本地状态
        setResume(prev => prev ? { ...prev, status: selectedStatus } : prev);
      }

      setHasUnsavedChanges(false);
      setShowSaveDialog(false);
      
      // 现代化成功提示
      const successNotification = document.createElement('div');
      successNotification.className = 'fixed top-6 right-6 bg-gradient-to-r from-emerald-500 to-green-600 text-white px-6 py-4 rounded-xl shadow-xl z-50 transform transition-all duration-300 translate-x-full';
      successNotification.innerHTML = `
        <div class="flex items-center gap-3">
          <svg class="w-6 h-6 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <div>
            <div class="font-medium">
              ${selectedStatus ? `Resume saved as ${selectedStatus === 'active' ? 'Active' : 'Draft'}!` : 'Resume saved successfully!'}
            </div>
            <div class="text-sm opacity-90">Your changes have been saved</div>
          </div>
        </div>
      `;
      document.body.appendChild(successNotification);
      
      // Animate in
      setTimeout(() => {
        successNotification.classList.remove('translate-x-full');
      }, 100);
      
      // Animate out and remove
      setTimeout(() => {
        successNotification.classList.add('translate-x-full');
        setTimeout(() => {
          if (document.body.contains(successNotification)) {
            document.body.removeChild(successNotification);
          }
        }, 300);
      }, 3000);

    } catch (error) {
      console.error('Error in saveResumeData:', error);
      alert('An error occurred while saving. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  // 处理保存按钮点击
  const handleSaveClick = () => {
    if (!resumeDetail) return;
    
    const completion = calculateCompletion(resumeDetail);
    
    // 如果完成度低于40%，直接保存为草稿
    if (completion < 40) {
      saveResumeData('draft');
      return;
    }
    
    // 如果完成度较高，显示状态选择对话框
    setShowSaveDialog(true);
  };

  // 开始编辑标题
  const startEditingTitle = () => {
    if (!resume) return;
    setTempTitle(resume.title);
    setEditingTitle(true);
  };

  // 保存标题
  const saveTitle = async () => {
    if (!resume || !tempTitle.trim()) return;
    
    try {
      const { error } = await supabase
        .from('resumes')
        .update({ 
          title: tempTitle.trim(),
          updated_at: new Date().toISOString()
        })
        .eq('id', resume.id);

      if (error) {
        console.error('Error updating resume title:', error);
        alert('Failed to update resume title. Please try again.');
        return;
      }

      // 更新本地状态
      setResume(prev => prev ? { ...prev, title: tempTitle.trim() } : prev);
      setEditingTitle(false);
      
      // 现代化成功提示
      const successNotification = document.createElement('div');
      successNotification.className = 'fixed top-6 right-6 bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-6 py-3 rounded-xl shadow-lg z-50';
      successNotification.innerHTML = `
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span class="font-medium">Resume title updated!</span>
        </div>
      `;
      document.body.appendChild(successNotification);
      setTimeout(() => {
        if (document.body.contains(successNotification)) {
          document.body.removeChild(successNotification);
        }
      }, 2000);

    } catch (error) {
      console.error('Error in saveTitle:', error);
      alert('An error occurred while updating title. Please try again.');
    }
  };

  // 取消编辑标题
  const cancelEditingTitle = () => {
    setTempTitle('');
    setEditingTitle(false);
  };

  // 处理标题输入的回车键
  const handleTitleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      saveTitle();
    } else if (e.key === 'Escape') {
      cancelEditingTitle();
    }
  };

  // 计算简历完成度
  const calculateCompletion = (data: ResumeDetail | null): number => {
    if (!data) return 0;
    
    let completedFields = 0;
    let totalFields = 0;
    
    // 基本信息 (权重: 30%)
    const basicFields = ['full_name', 'email', 'phone', 'location', 'professional_summary'];
    const basicCompleted = basicFields.filter(field => {
      const value = data[field as keyof ResumeDetail];
      return value && value.toString().trim() !== '';
    }).length;
    completedFields += basicCompleted * 6; // 每个基本信息字段权重为6
    totalFields += basicFields.length * 6;
    
    // 技能 (权重: 15%)
    if (data.skills && Array.isArray(data.skills) && data.skills.length > 0) {
      const hasValidSkills = data.skills.some(skillCategory => 
        skillCategory.items && skillCategory.items.length > 0
      );
      if (hasValidSkills) completedFields += 15;
    }
    totalFields += 15;
    
    // 教育背景 (权重: 20%)
    if (data.education && Array.isArray(data.education) && data.education.length > 0) {
      const hasValidEducation = data.education.some(edu => 
        edu.school && edu.school.trim() !== '' && edu.degree && edu.degree.trim() !== ''
      );
      if (hasValidEducation) completedFields += 20;
    }
    totalFields += 20;
    
    // 工作经历 (权重: 20%)
    if (data.experience && Array.isArray(data.experience) && data.experience.length > 0) {
      const hasValidExperience = data.experience.some(exp => 
        exp.company && exp.company.trim() !== '' && exp.position && exp.position.trim() !== ''
      );
      if (hasValidExperience) completedFields += 20;
    }
    totalFields += 20;
    
    // 项目经历 (权重: 10%)
    if (data.projects && Array.isArray(data.projects) && data.projects.length > 0) {
      const hasValidProjects = data.projects.some(project => 
        project.name && project.name.trim() !== '' && project.description && project.description.trim() !== ''
      );
      if (hasValidProjects) completedFields += 10;
    }
    totalFields += 10;
    
    // 附加信息 (权重: 5%)
    const additionalItems = [
      data.certifications && Array.isArray(data.certifications) && data.certifications.length > 0,
      data.languages && Array.isArray(data.languages) && data.languages.length > 0,
      data.interests && data.interests.trim() !== ''
    ];
    const additionalCompleted = additionalItems.filter(Boolean).length;
    completedFields += additionalCompleted * 1.67; // 平均分配5%权重
    totalFields += 5;
    
    return Math.round((completedFields / totalFields) * 100);
  };

  // 更新简历详情
  const updateResumeDetail = (field: keyof ResumeDetail, value: any) => {
    if (!resumeDetail) return;
    
    setResumeDetail(prev => prev ? { ...prev, [field]: value } : prev);
    setHasUnsavedChanges(true);
  };

  const sections = [
    { id: 'basic', label: 'Basic Info', icon: 'M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z', color: 'from-blue-500 to-indigo-600' },
    { id: 'skills', label: 'Skills', icon: 'M13 10V3L4 14h7v7l9-11h-7z', color: 'from-indigo-500 to-purple-600' },
    { id: 'education', label: 'Education', icon: 'M12 14l9-5-9-5-9 5 9 5z M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z', color: 'from-purple-500 to-pink-600' },
    { id: 'experience', label: 'Experience', icon: 'M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V8a2 2 0 012-2V6', color: 'from-emerald-500 to-teal-600' },
    { id: 'projects', label: 'Projects', icon: 'M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z', color: 'from-indigo-500 to-purple-600' },
    { id: 'additional', label: 'Additional', icon: 'M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4', color: 'from-rose-500 to-pink-600' }
  ];

  useEffect(() => {
    if (resumeId) {
      fetchResumeData();
    }
  }, [resumeId]);

  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (hasUnsavedChanges) {
        e.preventDefault();
        e.returnValue = '';
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => window.removeEventListener('beforeunload', handleBeforeUnload);
  }, [hasUnsavedChanges]);

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100">
        <Header />
        <div className="flex items-center justify-center min-h-[80vh]">
          <div className="text-center">
            <div className="relative">
              <div className="w-20 h-20 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full mx-auto mb-6 flex items-center justify-center shadow-lg">
                <svg className="w-8 h-8 text-white animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
              </div>
              <div className="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-indigo-600/20 rounded-full blur-xl"></div>
            </div>
            <h2 className="text-2xl font-bold text-slate-800 mb-2">Loading Resume</h2>
            <p className="text-slate-600">Please wait while we prepare your workspace...</p>
          </div>
        </div>
      </div>
    );
  }

  if (!resume || !resumeDetail) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100">
        <Header />
        <div className="flex items-center justify-center min-h-[80vh]">
          <div className="text-center max-w-md mx-auto p-8">
            <div className="w-24 h-24 bg-gradient-to-br from-red-100 to-red-200 rounded-full mx-auto mb-6 flex items-center justify-center">
              <svg className="w-12 h-12 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
              </svg>
            </div>
            <h2 className="text-3xl font-bold text-slate-800 mb-4">Resume Not Found</h2>
            <p className="text-slate-600 mb-8">The resume you're looking for doesn't exist or has been removed.</p>
            <button
              onClick={() => router.push('/dashboard/student/resumes')}
              className="bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-8 py-3 rounded-xl font-medium hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
            >
              Back to Resumes
            </button>
          </div>
        </div>
      </div>
    );
  }

  const completion = calculateCompletion(resumeDetail);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100">
      <Header />
      
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Modern Header Section */}
        <div className="relative mb-8">
          <div className="absolute inset-0 bg-gradient-to-r from-blue-500/10 to-indigo-500/10 rounded-3xl blur-3xl"></div>
          <div className="relative bg-white/80 backdrop-blur-sm border border-white/50 rounded-3xl p-8 shadow-xl">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div className="flex-1">
                <div className="flex items-center gap-4 mb-4">
                  <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center shadow-lg">
                    <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <div>
                    <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-900 via-slate-700 to-blue-600 bg-clip-text text-transparent">
                      Resume Editor
                    </h1>
                    <div className="flex items-center gap-3 mt-2">
                      <span className="text-slate-600">Editing:</span>
                      {editingTitle ? (
                        <div className="flex items-center gap-2">
                          <input
                            type="text"
                            value={tempTitle}
                            onChange={(e) => setTempTitle(e.target.value)}
                            onKeyDown={handleTitleKeyPress}
                            className="bg-white border border-blue-300 rounded-lg px-3 py-1 text-slate-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Enter resume title"
                            autoFocus
                          />
                          <button
                            onClick={saveTitle}
                            className="text-emerald-600 hover:text-emerald-800 hover:bg-emerald-100 p-1 rounded transition-all duration-200"
                            title="Save title"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                          </button>
                          <button
                            onClick={cancelEditingTitle}
                            className="text-red-600 hover:text-red-800 hover:bg-red-100 p-1 rounded transition-all duration-200"
                            title="Cancel"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      ) : (
                        <div className="flex items-center gap-2">
                          <span className="font-semibold text-slate-800">{resume.title}</span>
                          <button
                            onClick={startEditingTitle}
                            className="text-slate-600 hover:text-slate-800 hover:bg-slate-100 p-1 rounded transition-all duration-200"
                            title="Edit title"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                          </button>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* Progress Bar */}
                <div className="mb-4">
                  <div className="flex items-center justify-between text-sm text-slate-600 mb-2">
                    <span>Completion Progress</span>
                    <span className="font-medium">{completion}%</span>
                  </div>
                  <div className="w-full bg-slate-200 h-2 rounded-full overflow-hidden">
                    <div
                      className={`h-full transition-all duration-700 ${
                        completion < 30 ? 'bg-gradient-to-r from-red-500 to-orange-500' :
                        completion < 70 ? 'bg-gradient-to-r from-amber-500 to-yellow-500' :
                        'bg-gradient-to-r from-emerald-500 to-green-500'
                      }`}
                      style={{ width: `${completion}%` }}
                    ></div>
                  </div>
                </div>

                <div className="flex items-center gap-6 text-sm text-slate-500">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-emerald-400 rounded-full animate-pulse"></div>
                    <span>Auto-save Enabled</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                    <span>Live Preview</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                    <span>Professional Template</span>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center gap-4">
                <button
                  onClick={() => router.push('/dashboard/student/resumes')}
                  className="bg-gradient-to-r from-slate-500 to-gray-600 text-white px-6 py-3 rounded-xl font-medium hover:from-slate-600 hover:to-gray-700 transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-xl"
                >
                  Back
                </button>
                
                <button
                  onClick={handleSaveClick}
                  disabled={saving || !hasUnsavedChanges}
                  className={`px-8 py-3 rounded-xl font-medium transition-all duration-300 transform shadow-lg ${
                    saving || !hasUnsavedChanges
                      ? 'bg-gradient-to-r from-slate-300 to-slate-400 text-slate-600 cursor-not-allowed'
                      : 'bg-gradient-to-r from-emerald-500 to-green-600 text-white hover:from-emerald-600 hover:to-green-700 hover:scale-105 hover:shadow-xl'
                  }`}
                >
                  {saving ? (
                    <div className="flex items-center gap-2">
                      <svg className="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                      </svg>
                      Saving...
                    </div>
                  ) : hasUnsavedChanges ? 'Save Changes' : 'All Saved'}
                </button>
              </div>
            </div>
            
            {hasUnsavedChanges && (
              <div className="mt-6 p-4 bg-gradient-to-r from-amber-50 to-orange-50 border border-amber-200 rounded-xl">
                <div className="flex items-center gap-3">
                  <svg className="w-5 h-5 text-amber-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                  </svg>
                  <div>
                    <p className="text-amber-900 font-medium">Unsaved Changes Detected</p>
                    <p className="text-amber-800 text-sm">Don't forget to save your progress before leaving!</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Modern Sidebar Navigation */}
          <div className="lg:col-span-1">
            <div className="bg-white/70 backdrop-blur-sm border border-white/50 rounded-2xl p-6 shadow-lg sticky top-8">
              <h3 className="text-xl font-bold text-slate-800 mb-6">Resume Sections</h3>
              <nav className="space-y-3">
                {sections.map((section) => (
                  <button
                    key={section.id}
                    onClick={() => setActiveSection(section.id)}
                    className={`w-full flex items-center gap-4 px-4 py-3 rounded-xl text-left transition-all duration-300 transform ${
                      activeSection === section.id
                        ? `bg-gradient-to-r ${section.color} text-white shadow-lg scale-105`
                        : 'text-slate-700 hover:bg-slate-100 hover:scale-105'
                    }`}
                  >
                    <div className={`w-8 h-8 rounded-lg flex items-center justify-center ${
                      activeSection === section.id 
                        ? 'bg-white/20' 
                        : `bg-gradient-to-r ${section.color}`
                    }`}>
                      <svg className={`w-4 h-4 ${
                        activeSection === section.id ? 'text-white' : 'text-white'
                      }`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d={section.icon} />
                      </svg>
                    </div>
                    <span className="font-medium">{section.label}</span>
                  </button>
                ))}
              </nav>
              
              <div className="mt-8 pt-6 border-t border-slate-200">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="text-sm font-semibold text-slate-700">Completion Status</h4>
                  <span className="text-sm font-bold text-slate-800">{completion}%</span>
                </div>
                <div className="relative">
                  <div className="w-full bg-slate-200 h-3 rounded-full overflow-hidden">
                    <div
                      className={`h-full transition-all duration-700 ${
                        completion < 30 ? 'bg-gradient-to-r from-red-500 to-orange-500' :
                        completion < 70 ? 'bg-gradient-to-r from-amber-500 to-yellow-500' :
                        'bg-gradient-to-r from-emerald-500 to-green-500'
                      }`}
                      style={{ width: `${completion}%` }}
                    ></div>
                  </div>
                  <div className="absolute inset-0 flex items-center justify-center">
                    <span className="text-xs font-medium text-white drop-shadow-sm">
                      {completion < 30 ? 'Getting Started' :
                       completion < 70 ? 'In Progress' : 'Nearly Complete'}
                    </span>
                  </div>
                </div>
                <div className="mt-3 grid grid-cols-3 gap-2 text-xs">
                  <div className="text-center">
                    <div className="w-2 h-2 bg-red-500 rounded-full mx-auto mb-1"></div>
                    <span className="text-slate-600">Basic</span>
                  </div>
                  <div className="text-center">
                    <div className="w-2 h-2 bg-amber-500 rounded-full mx-auto mb-1"></div>
                    <span className="text-slate-600">Good</span>
                  </div>
                  <div className="text-center">
                    <div className="w-2 h-2 bg-emerald-500 rounded-full mx-auto mb-1"></div>
                    <span className="text-slate-600">Excellent</span>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Main Content Area */}
          <div className="lg:col-span-3">
            <div className="bg-white/70 backdrop-blur-sm border border-white/50 rounded-2xl shadow-lg overflow-hidden">
              <div className="p-8">
                {activeSection === 'basic' && (
                  <BasicInfoSection
                    data={resumeDetail}
                    onChange={updateResumeDetail}
                  />
                )}
                
                {activeSection === 'skills' && (
                  <SkillsSection
                    data={resumeDetail}
                    onChange={updateResumeDetail}
                  />
                )}
                
                {activeSection === 'education' && (
                  <EducationSection
                    data={resumeDetail}
                    onChange={updateResumeDetail}
                  />
                )}
                
                {activeSection === 'experience' && (
                  <ExperienceSection
                    data={resumeDetail}
                    onChange={updateResumeDetail}
                  />
                )}
                
                {activeSection === 'projects' && (
                  <ProjectsSection
                    data={resumeDetail}
                    onChange={updateResumeDetail}
                  />
                )}
                
                {activeSection === 'additional' && (
                  <AdditionalInfoSection
                    data={resumeDetail}
                    onChange={updateResumeDetail}
                  />
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Modern Save Dialog */}
      {showSaveDialog && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 px-4">
          <div className="bg-white/90 backdrop-blur-sm border border-white/50 rounded-3xl max-w-md w-full shadow-2xl transform transition-all duration-300">
            <div className="p-8">
              <div className="text-center mb-6">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl mx-auto mb-4 flex items-center justify-center shadow-lg">
                  <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4" />
                  </svg>
                </div>
                <h3 className="text-2xl font-bold text-slate-800 mb-2">Save Your Progress</h3>
                <p className="text-slate-600">
                  Your resume is <span className="font-semibold text-slate-800">{completion}% complete</span>. 
                  Choose how you'd like to save it.
                </p>
              </div>
              
              <div className="space-y-4 mb-8">
                <div className="relative overflow-hidden rounded-xl border-2 border-amber-200 bg-gradient-to-r from-amber-50 to-orange-50 hover:from-amber-100 hover:to-orange-100 transition-all duration-300 cursor-pointer group">
                  <div className="p-4">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
                        <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <div className="flex-1">
                        <h4 className="text-lg font-bold text-slate-800">Save as Draft</h4>
                        <p className="text-sm text-slate-600">Continue editing later</p>
                      </div>
                    </div>
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </div>
                
                <div className="relative overflow-hidden rounded-xl border-2 border-emerald-200 bg-gradient-to-r from-emerald-50 to-green-50 hover:from-emerald-100 hover:to-green-100 transition-all duration-300 cursor-pointer group">
                  <div className="p-4">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-emerald-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg">
                        <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                      </div>
                      <div className="flex-1">
                        <h4 className="text-lg font-bold text-slate-800">Mark as Active</h4>
                        <p className="text-sm text-slate-600">Ready for job applications</p>
                      </div>
                    </div>
                  </div>
                  <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </div>
              </div>
              
              <div className="flex gap-3">
                <button
                  onClick={() => setShowSaveDialog(false)}
                  className="flex-1 bg-gradient-to-r from-slate-500 to-gray-600 text-white px-6 py-3 rounded-xl font-medium hover:from-slate-600 hover:to-gray-700 transition-all duration-300 transform hover:scale-105"
                >
                  Cancel
                </button>
                <button
                  onClick={() => saveResumeData('draft')}
                  disabled={saving}
                  className={`flex-1 px-6 py-3 rounded-xl font-medium transition-all duration-300 transform hover:scale-105 ${
                    saving 
                      ? 'bg-gradient-to-r from-amber-300 to-orange-300 text-amber-800 cursor-not-allowed' 
                      : 'bg-gradient-to-r from-amber-500 to-orange-600 text-white hover:from-amber-600 hover:to-orange-700 shadow-lg hover:shadow-xl'
                  }`}
                >
                  Save Draft
                </button>
                <button
                  onClick={() => saveResumeData('active')}
                  disabled={saving}
                  className={`flex-1 px-6 py-3 rounded-xl font-medium transition-all duration-300 transform hover:scale-105 ${
                    saving 
                      ? 'bg-gradient-to-r from-emerald-300 to-green-300 text-emerald-800 cursor-not-allowed' 
                      : 'bg-gradient-to-r from-emerald-500 to-green-600 text-white hover:from-emerald-600 hover:to-green-700 shadow-lg hover:shadow-xl'
                  }`}
                >
                  Mark Active
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}